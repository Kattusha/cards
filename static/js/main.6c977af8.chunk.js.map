{"version":3,"sources":["ui/style/commonStyle.js","ui/style/headerStyle.js","ui/components/Header.tsx","ui/style/bodyStyle.js","ui/style/forForms/formControlsStyle.js","ui/components/forForms/FormsControls.tsx","ui/components/auth/SignUpForm.tsx","ui/style/forForms/formsStyle.js","ui/components/auth/SignUp.tsx","ui/components/Body.tsx","ui/App.tsx","serviceWorker.ts","actions/auth-reducer.ts","actions/store.ts","index.tsx","ui/images/logo.png"],"names":["H3","styled","h3","Span","p","BlockWrapper","div","FlexRowCenter","ContainerWrapper","Button","button","props","color","HeaderWrapper","HeaderContainer","LogoLinkBlock","LogoImg","img","LogoText","span","MenuNavLink","NavLink","Header","src","logo","alt","to","as","MainWrapper","MainContainer","FormStyled","form","InputStyled","input","Input","SignUpReduxForm","reduxForm","Field","name","component","type","placeholder","SignUpForm","SignUp","Body","path","AppWrapper","App","Boolean","window","location","hostname","match","initialState","email","login","idUser","isAuth","authReducer","state","action","data","rootReducer","combineReducers","auth","formReducer","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.6c977af8.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\r\nimport React from \"react\";\r\n\r\nexport const H3 = styled.h3`\r\n    font-size: 21px;\r\n    text-align: center;\r\n    color: #5c5c5c;\r\n`;\r\n\r\nexport const Span = styled.p`\r\n    //font-size: ${props => props.sizze===\"little\" ? \"15px\" : \"18px\"};\r\n    font-size: 15px;\r\n    text-align: center;\r\n    color: #898989;\r\n`;\r\n\r\nexport const BlockWrapper = styled.div`\r\n    margin-bottom: 30px;\r\n    width: 100%;\r\n`;\r\nexport const FlexRowCenter = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n`;\r\nexport const ContainerWrapper = styled(FlexRowCenter)`\r\n    margin: 0 auto;\r\n    width: 1082px;\r\n`;\r\nconst Link = ({ className, children }) => (\r\n    <a className={className}>\r\n        {children}\r\n    </a>\r\n);\r\nexport const Button = styled.button`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 15px;\r\n    padding: 13px 25px 9px;\r\n    border: none;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n    \r\n    background: ${props => props.color===\"white\" ? \"#fff\" : \"#32cdff\"};\r\n    color: ${props => props.color===\"white\" ? \"#32cdff\" : \"#fff\"};\r\n    text-transform: uppercase;\r\n    \r\n    &:hover {\r\n        filter: brightness(95%);\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\n","import styled from 'styled-components/macro';\r\nimport {BlockWrapper, ContainerWrapper, FlexRowCenter} from \"./commonStyle\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const HeaderWrapper = styled(BlockWrapper)`\r\n    background-color: #32cdff;\r\n    box-shadow: 0 3px 5px rgba(0,0,0,.05);\r\n    height: 60px;\r\n`;\r\nexport const HeaderContainer = styled(ContainerWrapper)`\r\n    justify-content: space-between;\r\n`;\r\nexport const LogoLinkBlock = styled(FlexRowCenter)`\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n`;\r\nexport const LogoImg = styled.img`\r\n    height: 44px;\r\n    width: 44px;\r\n    margin-right: 5px;\r\n`;\r\nexport const LogoText = styled.span`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 30px;\r\n    color: #fff;\r\n    text-transform: lowercase;\r\n`;\r\nexport const MenuNavLink = styled(NavLink)`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 15px;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    margin-top: 6px;\r\n    margin-right: 40px;\r\n    opacity: .8;\r\n    cursor: pointer;\r\n    \r\n    &:hover {\r\n        opacity: 1;\r\n        border-bottom: 2px solid #fff;\r\n        padding-top: 2px;\r\n    }\r\n`;","import React from 'react';\nimport {HeaderContainer, HeaderWrapper, LogoImg, LogoLinkBlock, LogoText, MenuNavLink} from \"../style/headerStyle\";\nimport logo from '../images/logo.png'\nimport {FlexRowCenter, Button} from '../style/commonStyle';\nimport {NavLink} from \"react-router-dom\";\n\nconst Header = () => {\n    return (\n        <HeaderWrapper>\n            <HeaderContainer>\n                <LogoLinkBlock>\n                {/*<LogoLinkBlock as={NavLink} to='/login'>*/}\n                    <LogoImg src={logo} alt=\"logo\"/>\n                    <LogoText>cards</LogoText>\n                </LogoLinkBlock>\n                <FlexRowCenter>\n                    <MenuNavLink to='/login'>Log in</MenuNavLink>\n                    <MenuNavLink to=\"/signup\">Sign up</MenuNavLink>\n                    <MenuNavLink to=\"/forgot\">Forgot</MenuNavLink>\n                    <MenuNavLink to=\"/newpassword\">New password</MenuNavLink>\n                    <MenuNavLink to=\"/profile\">Profile</MenuNavLink>\n                    <Button as={NavLink} to='/signup' color={\"white\"}>Sign up</Button>\n                </FlexRowCenter>\n            </HeaderContainer>\n        </HeaderWrapper>\n    )\n}\n\nexport default Header;\n","import styled from 'styled-components/macro';\r\nimport {BlockWrapper, ContainerWrapper, FlexRowCenter} from \"./commonStyle\";\r\n\r\nexport const MainWrapper = styled(BlockWrapper)`\r\n    height: 500px;\r\n`;\r\nexport const MainContainer = styled(ContainerWrapper)`\r\n    background-color: #fff;\r\n    border: none;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 25px 0 rgba(0,0,0,.04);\r\n`;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const FormStyled = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 300px;\r\n`;\r\n\r\nexport const InputStyled = styled.input`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 18px;\r\n    border: none;\r\n    border-bottom: 2px solid #c4c4c4;\r\n    margin: 10px 0;\r\n    width: 100%;\r\n    color: #5c5c5c\r\n    opacity: .5;\r\n`;\r\n\r\n\r\n// const PasswordInput = styled.input.attrs(props => ({\r\n//         // Every <PasswordInput /> should be type=\"password\"\r\n//         type: \"password\"\r\n//     }))``\r\n//\r\n//     // This specific one is hidden, so let's set aria-hidden\r\n//     <PasswordInput aria-hidden=\"true\" />","import React from \"react\";\r\nimport {InputStyled} from \"../../style/forForms/formControlsStyle\";\r\n\r\nexport const Input = ({input, ...props}: any) => {\r\n\r\n    return (\r\n        <InputStyled {...input} {...props} />\r\n    )\r\n\r\n\r\n    // const hasError = meta.touched && meta.error;\r\n    // const hasErrorBlock = hasError && style.error;\r\n    // return (\r\n    //     <div className={`${style.block} ${hasErrorBlock}`}>\r\n    //         {hasError && <span>{meta.error}</span>}\r\n    //         <input {...input} {...props} />\r\n    //     </div>\r\n    // )\r\n}\r\n","import {Field, Form, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../forForms/FormsControls\";\r\nimport {Button} from \"../../style/commonStyle\";\r\nimport { FormStyled } from \"../../style/forForms/formControlsStyle\";\r\n// import {requiredField} from \"./validators\";\r\n\r\nconst SignUpForm = () => {\r\n    return (\r\n        <FormStyled>\r\n            <Field name=\"name\" component={Input} type=\"text\" placeholder=\"Name\"\r\n                // validate={[requiredField]}\r\n            />\r\n            <Field name=\"email\" component={Input} type=\"email\" placeholder=\"Email\"\r\n                   // validate={[requiredField]}\r\n            />\r\n            <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\"\r\n                   // validate={[requiredField]}\r\n            />\r\n            {/*<div>*/}\r\n            {/*    <Field name=\"rememberMe\" component={Input} type=\"checkbox\"/>remember me*/}\r\n            {/*</div>*/}\r\n            <Button color={\"blue\"}>Sign Up</Button>\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const SignUpReduxForm = reduxForm({form: 'signUp'})(SignUpForm)","import styled from 'styled-components/macro';\r\n\r\nexport const SignUpForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;","import React from 'react';\r\nimport {SignUpReduxForm} from \"./SignUpForm\";\r\nimport {H3, Span} from \"../../style/commonStyle\";\r\nimport {SignUpForm} from \"../../style/forForms/formsStyle\";\r\n\r\nconst SignUp = () => {\r\n    return (\r\n        <SignUpForm>\r\n            <H3>Create a account</H3>\r\n            <Span>Already have an account?</Span>\r\n            <SignUpReduxForm />\r\n        </SignUpForm>\r\n    )\r\n}\r\n\r\nexport default SignUp;\r\n","import React from 'react';\nimport {MainContainer, MainWrapper} from '../style/bodyStyle';\nimport SignUp from \"./auth/SignUp\";\nimport {Route} from \"react-router-dom\";\n\nconst Body = () => {\n    return (\n        <MainWrapper>\n            <MainContainer>\n                <Route path='/signup' component={SignUp}/>\n                {/*<Route exact path='/' render={() => <App/>}/>*/}\n                {/*<Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>*/}\n            </MainContainer>\n        </MainWrapper>\n    )\n}\n\nexport default Body;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\n\nconst AppWrapper = styled.div`\n    margin: 0 auto;\n    `;\n\nconst App = () => {\n    return (\n        <AppWrapper>\n            <Header />\n            <Body />\n        </AppWrapper>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AuthType} from \"../data/entity-auth\";\r\nimport {InferActionTypes} from \"./store\";\r\n\r\nlet initialState: AuthType = {\r\n    email: \"\",\r\n    login: \"\",\r\n    idUser: \"\",\r\n    isAuth: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n                // isAuth: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId:number, email:string, login:string) =>\r\n        ({type: \"LOGIN\", data: {userId, email, login}})\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//example thunk\r\n\r\n// export const login = (email:string, password:string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n//     async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>, getState: () => AppStateType) => {\r\n//         const response = await authAPI.login(email, password)\r\n//         if (response.resultCode === 0) {\r\n//             dispatch(actions.setAuthUserData(response.data.data.userId, response.data.data.email, response.data.data.login))\r\n//         }\r\n//         else{\r\n//             let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n//             dispatch(stopSubmit(\"login\", {_error: message}));\r\n//         }\r\n//     }\r\n\r\n// example thunk from socialNetwork\r\n\r\n// export const logout = () => {\r\n//     return (dispatch) => {\r\n//         authAPI.logout()\r\n//             .then(response => {\r\n//                 debugger\r\n//                 if (response.resultCode === 0) {\r\n//                     dispatch(setAuthUserData(null, null, null, false));\r\n//                 }\r\n//             });\r\n//     }\r\n// };\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport authReducer from \"./auth-reducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n    // cards: cardsReducer,\r\n    auth: authReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends {[key: string]: (...args:any)=> any}> = ReturnType<PropertiesType<T>>\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './ui/style/index.css';\nimport App from './ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from './actions/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.3a344931.png\";"],"sourceRoot":""}