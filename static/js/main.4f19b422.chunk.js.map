{"version":3,"sources":["main/ui/images/logo.png","main/ui/images/no-user-photo.jpg","main/ui/style/commonStyle.ts","main/ui/style/headerStyle.ts","main/ui/style/bodyStyle.ts","main/ui/style/forForms/formsStyle.ts","main/ui/style/forForms/formControlsStyle.ts","main/ui/components/forForms/FormsControls.tsx","main/ui/components/forForms/validators.ts","main/ui/components/preloader/Preloader.tsx","01-auth/registration/SignInForm.tsx","01-auth/api.ts","01-auth/registration/registration-reducer.ts","01-auth/registration/SignIn.tsx","01-auth/login/LoginForm.tsx","01-auth/login/cookies.ts","01-auth/login/login-reducer.ts","01-auth/login/Login.tsx","01-auth/recoveryPassword/RecoveryPasswordForm.tsx","01-auth/recoveryPassword/recoveryPassword-reducer.ts","01-auth/recoveryPassword/RecoveryPassword.tsx","01-auth/newPassword/NewPasswordForm.tsx","01-auth/newPassword/NewPassword.tsx","02-tables/api.ts","02-tables/cardDecks/cardDecksReducer.ts","02-tables/cardDecks/deck.tsx","02-tables/cardDecks/cardDecks.tsx","02-tables/cardDecks/addDeckForm.tsx","02-tables/cardDecks/cardDecksContainer.tsx","02-tables/cards/cardsReducer.ts","02-tables/cards/Card.tsx","02-tables/cards/CardsOfDeck.tsx","02-tables/cards/cardsContainer.tsx","01-auth/profile/Profile.tsx","main/ui/components/Body.tsx","main/ui/components/Header.tsx","main/bll/app-reducer.ts","main/ui/App.tsx","serviceWorker.ts","01-auth/newPassword/newPassword-reducer.ts","01-auth/profile/profile-reducer.ts","main/bll/store.ts","index.tsx"],"names":["module","exports","H1","styled","h1","H3","h3","Span","p","props","color","BlockWrapper","div","FlexRowCenter","ContainerWrapper","Button","button","TextLink","NavLink","HeaderWrapper","HeaderContainer","LogoLinkBlock","LogoImg","img","LogoText","span","MenuNavLink","IconDiv","MainWrapper","MainContainer","whiteBox","SignUpForm","LoginForm","RecoveryPasswordForm","NewPasswordForm","FormStyled","form","InputCheckBoxDiv","InputStyled","input","hasError","type","ErrorBlock","Input","meta","placeholder","touched","error","errorText","requiredField","value","maxLength","length","emailValidation","test","undefined","Preloader","size","backColor","frontColor","isLoading","loading","maxLength8","SignInReduxForm","reduxForm","handleSubmit","regInProgress","invalid","onSubmit","Field","name","component","validate","disabled","instance","axios","create","baseURL","authAPI","email","password","post","then","response","data","rememberMe","html1","success","resetPasswordToken","token","initialState","isRegistrationSuccessful","isRegistrationInProgress","actions","progress","registrationReducer","state","action","SignIn","dispatch","useDispatch","useSelector","store","registration","to","LOGIN_PATH","formData","a","stopSubmit","_error","LoginReduxForm","RECOVERY_PASSWORD_PATH","setCookie","age","document","cookie","getCookie","matches","match","RegExp","replace","decodeURIComponent","userId","isAuthorized","loginReducer","Login","login","PROFILE_PATH","SIGN_IN_PATH","Math","floor","tokenDeathTime","_id","RecoveryPasswordReduxForm","isSendEmail","isSaveNewPassword","errorMessage","recoveryPasswordReducer","RecoveryPassword","recoveryPassword","NewPasswordReduxForm","NewPassword","repeatPassword","params","setNewPassword","decksAPI","userID","get","res","id","delete","object","cardsAPI","deckId","cardPacks","cardPacksTotalCount","maxGrade","minGrade","page","pageCount","decks","getDecks","getState","cardDecksReducer","map","cardPack","filter","DeckWrapper","ActionsMenu","Action","backgroundColor","NameDeckNavLink","Deck","grade","shots","rating","deletePack","Name","InfoHeader","onClick","DecksWrapper","DeckHeader","CardDecks","deck","key","AddDeckReduxForm","CardDecksContainer","useEffect","Wrapper","newPack","newDeck","cardsPack","addDeck","user_id","deletedCardsPack","deleteDeck","cards","cardsTotalCount","cardsReducer","card","Card","question","deleteCard","CardsOfDecks","compose","withRouter","getCards","CardsOfDeck","deletedCard","library","add","fas","Profile","ProfileContainer","UserCardInfo","UserPhoto","src","noUserPhoto","alt","Line","icon","UserDecksInfoContainer","path","CARDS_PATH_WITH_USER","exact","Body","render","far","Header","logo","as","isInitializedApp","initializationApp","console","log","appReducer","AppWrapper","App","app","Boolean","window","location","hostname","newPasswordReducer","profileReducer","rootReducer","combineReducers","newPassword","profile","formReducer","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","unregister","catch","message"],"mappings":"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","file":"static/js/main.4f19b422.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3a344931.png\";","module.exports = __webpack_public_path__ + \"static/media/no-user-photo.08e9b4f3.jpg\";","import styled from 'styled-components/macro';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const H1 = styled.h1`\r\n    font-size: 27px;\r\n    //color: #5c5c5c;\r\n    font-family: DINNextLTPro-Medium;\r\n    font-weight: 400;\r\n    margin: 20px 0 0;\r\n`;\r\n\r\nexport const H3 = styled.h3`\r\n    font-size: 21px;\r\n    text-align: center;\r\n    color: #5c5c5c;\r\n`;\r\n\r\nexport const Span = styled.p`\r\n    font-size: 15px;\r\n    text-align: center;\r\n    //color: #898989;\r\n    color: ${props => props.color === \"red\" ? \"red\" : \"#898989\"};\r\n    font-family:${props => props.color === \"red\" ? \"DINNextLTPro-Bold\" : \"DINNextLTPro-Regular\"}; // 'DINNextLTPro-Bold';\r\n`;\r\n\r\nexport const BlockWrapper = styled.div`\r\n    margin-bottom: 30px;\r\n    width: 100%;\r\n`;\r\nexport const FlexRowCenter = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n`;\r\nexport const ContainerWrapper = styled(FlexRowCenter)`\r\n    margin: 0 auto;\r\n    width: 1082px;\r\n`;\r\nexport const Button = styled.button`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 15px;\r\n    padding: 13px 25px 9px;\r\n    margin-top: ${props => props.color === \"white\" ? \"0\" : \"20px\"};\r\n    border: none;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n    \r\n    background: ${props => props.color === \"white\" ? \"#fff\" : \"#32cdff\"};\r\n    color: ${props => props.color === \"white\" ? \"#32cdff\" : \"#fff\"};\r\n    text-transform: uppercase;\r\n    \r\n    &:hover {\r\n        filter: brightness(95%);\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    &:disabled {\r\n        //cursor: default;\r\n        //opacity: .4;\r\n        background-color: #b0afaf;\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\nexport const TextLink = styled(NavLink)`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 15px;\r\n    color: #32cdff;\r\n    padding: 6px 5px 4px;\r\n    margin-top: 10px;\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n       \r\n    &:hover {\r\n        filter: brightness(95%);\r\n    }\r\n`;\r\n\r\n","import styled from 'styled-components/macro';\r\nimport {BlockWrapper, ContainerWrapper, FlexRowCenter} from \"./commonStyle\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const HeaderWrapper = styled(BlockWrapper)`\r\n    background-color: #32cdff;\r\n    box-shadow: 0 3px 5px rgba(0,0,0,.05);\r\n    height: 60px;\r\n`;\r\nexport const HeaderContainer = styled(ContainerWrapper)`\r\n    justify-content: space-between;\r\n`;\r\nexport const LogoLinkBlock = styled(FlexRowCenter)`\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n`;\r\nexport const LogoImg = styled.img`\r\n    height: 44px;\r\n    width: 44px;\r\n    margin-right: 5px;\r\n`;\r\nexport const LogoText = styled.span`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 30px;\r\n    color: #fff;\r\n    text-transform: lowercase;\r\n`;\r\nexport const MenuNavLink = styled(NavLink)`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 15px;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    margin-top: 6px;\r\n    margin-right: 40px;\r\n    opacity: .8;\r\n    cursor: pointer;\r\n    \r\n    &:hover {\r\n        opacity: 1;\r\n        border-bottom: 2px solid #fff;\r\n        padding-top: 2px;\r\n    }\r\n`;\r\nexport const IconDiv = styled.div`\r\n    margin-right: 10px;\r\n    display: inline-block;\r\n`;\r\n","import styled from 'styled-components/macro';\r\nimport {BlockWrapper, ContainerWrapper} from \"./commonStyle\";\r\n\r\nexport const MainWrapper = styled(BlockWrapper)`\r\n    height: 650px;\r\n    //min-height: 500px;\r\n`;\r\nexport const MainContainer = styled(ContainerWrapper)<{whiteBox?: boolean}>`\r\n    background-color: ${p => p.whiteBox ? '#fff' : '#f7f7f7'}; \r\n    border: none;\r\n    border-radius: 10px;\r\n    box-shadow: ${p => p.whiteBox ? ' 0 0 25px 0 rgba(0,0,0,.04)' : 'none'};\r\n`;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const SignUpForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;\r\nexport const LoginForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;\r\nexport const RecoveryPasswordForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;\r\nexport const NewPasswordForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;","import styled from 'styled-components/macro';\r\n\r\nexport const FormStyled = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 300px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const InputCheckBoxDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 16px;\r\n    color: #5c5c5c;\r\n    margin-bottom: 10px;\r\n`;\r\nexport const InputStyled = styled.input<{hasError: boolean}>`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 16px;\r\n    border: none;\r\n    //border-bottom: 2px solid #c4c4c4;\r\n    border-bottom: ${props => props.hasError ? \"1px solid red\" : \"1px solid #c4c4c4\"};\r\n    margin: 15px 0;\r\n    width: ${props => props.type === \"checkbox\" ? \"auto\" : \"100%\"}; //100%;\r\n    margin-right: ${props => props.type === \"checkbox\" ? \"10px\" : \"0\"}; //100%;\r\n    color: #5c5c5c;\r\n    opacity: .7;\r\n    &:hover,\r\n    &:focus,\r\n    &:active {\r\n      opacity: 1;\r\n      outline:none;\r\n      border-bottom: 1px solid #32cdff;\r\n      ::-webkit-input-placeholder {\r\n      background-color: #fff;\r\n    }\r\n    }\r\n`;\r\nexport const Error = styled.input<{hasError: boolean}>`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 18px;\r\n    border: none;\r\n    //border-bottom: 2px solid #c4c4c4;\r\n    border-bottom: ${props => props.hasError ? \"2px solid red\" : \"2px solid #c4c4c4\"};\r\n    margin: 10px 0;\r\n    width: 100%;\r\n    color: #5c5c5c;\r\n    opacity: .5;\r\n`;\r\nexport const ErrorBlock = styled.div`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    position: absolute;\r\n    padding: 0px 5px;\r\n    //line-height: 1.3em;\r\n    margin: -6px 0 0 20px;\r\n    color: #fff;\r\n    background: #ff4c4c;\r\n    &:after {\r\n        content: \" \";\r\n        position: absolute;\r\n        left: 5px;\r\n        bottom: 100%;\r\n        width: 0;\r\n        height: 0;\r\n        border-bottom: 10px solid #ff4c4c;\r\n        border-right: 10px solid transparent;\r\n    }\r\n`;\r\n\r\n\r\n// const PasswordInput = styled.input.attrs(props => ({\r\n//         // Every <PasswordInput /> should be type=\"password\"\r\n//         type: \"password\"\r\n//     }))``\r\n//\r\n//     // This specific one is hidden, so let's set aria-hidden\r\n//     <PasswordInput aria-hidden=\"true\" />","import React from \"react\";\r\nimport {ErrorBlock, InputStyled} from \"../../style/forForms/formControlsStyle\";\r\n//import {Span} from \"../../style/commonStyle\";\r\n\r\nexport const Input = ({input, meta, placeholder, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error ? true : false;\r\n    // const placeholderText = hasError? meta.error : placeholder;\r\n    return (\r\n        <>\r\n            <div>\r\n                <InputStyled hasError={hasError} {...input} {...props}\r\n                             errorText={meta.error}\r\n                             placeholder={placeholder}\r\n                />\r\n                {hasError && <ErrorBlock>{meta.error}</ErrorBlock>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export const requiredField = (value: string) => {\r\n    if (value)\r\n        return undefined;\r\n    else return \"Field is required\";\r\n}\r\n\r\nexport const maxLength = (maxLength: number) => (value: string) => {\r\n    if (value.length >= maxLength)\r\n        return  undefined;\r\n    else return `Password must be more than ${maxLength-1} characters`;\r\n}\r\n\r\nexport const emailValidation = (value: string) => {\r\n    return value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined\r\n}","import React from 'react';\r\nimport {ImpulseSpinner} from \"react-spinners-kit\";\r\nimport {FlexRowCenter} from '../../style/commonStyle';\r\n// https://reactjsexample.com/a-collection-of-loading-spinners-with-react-js-2/\r\n\r\ntype PreloaderType = {\r\n    backColor: string\r\n    frontColor: string\r\n    size: number\r\n    isLoading: boolean\r\n}\r\n\r\nconst Preloader: React.FC<PreloaderType> = ({size, backColor, frontColor, isLoading}) => {\r\n\r\n    return (\r\n        <FlexRowCenter>\r\n            <ImpulseSpinner size={size} backColor={backColor} frontColor={frontColor} loading={isLoading}/>\r\n        </FlexRowCenter>\r\n    )\r\n    // <RingSpinner size={size} color={color} loading={isLoading}/>\r\n}\r\n\r\nexport default Preloader;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {FormStyled} from \"../../main/ui/style/forForms/formControlsStyle\";\r\nimport {emailValidation, maxLength, requiredField} from \"../../main/ui/components/forForms/validators\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\n\r\ntype IPassProps = {\r\n    regInProgress: boolean\r\n}\r\n\r\nconst maxLength8 = maxLength(8);\r\n\r\nconst SignInForm = ({error, handleSubmit, regInProgress, invalid}: IPassProps & InjectedFormProps<{}, IPassProps>) => {\r\n    return (\r\n        <FormStyled onSubmit={handleSubmit}>\r\n            <Field name=\"email\" component={Input} type=\"email\" placeholder=\"Email\"\r\n                   validate={[emailValidation, requiredField]}\r\n            />\r\n            <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\"\r\n                   validate={[requiredField, maxLength8]}\r\n            />\r\n            {error && <Span color={\"red\"}>{error}</Span>}\r\n            {regInProgress ?\r\n                <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={regInProgress}/>\r\n                : <Button color={\"blue\"} disabled={invalid || regInProgress}>Sign Up</Button>}\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const SignInReduxForm = reduxForm<{}, IPassProps>({form: 'signIn'})(SignInForm)","import axios from \"axios\";\r\n\r\ntype RegistrationResponseType = {\r\n    addedUser: {\r\n        email: string\r\n        isAdmin: boolean\r\n    },\r\n    success: boolean\r\n}\r\n\r\nexport type AuthorizationResponseType = {\r\n    email: string\r\n    name: string\r\n    isAdmin: boolean\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    success: boolean\r\n    _id: string\r\n}\r\n\r\nexport type SuccessResponseType = {\r\n    success: boolean\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post<RegistrationResponseType>(`auth/register`, {email, password})\r\n            .then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<AuthorizationResponseType>(`auth/login`, {email, password, rememberMe})\r\n            .then(response => response.data)\r\n    },\r\n    forgotPassword(email: string){\r\n        return instance.post<SuccessResponseType>(`auth/forgot`,\r\n            {email, html1: '<a href=\"http://localhost:3000/newPassword/'})\r\n            .then(response => response.data.success)\r\n    },\r\n    setNewPassword(resetPasswordToken: string, password: string){\r\n        return instance.post<SuccessResponseType>(`auth/set-new-password`, {resetPasswordToken, password})\r\n            .then(response => response.data.success)\r\n    },\r\n    getMe(token:string) {\r\n        return instance.post<AuthorizationResponseType>(`auth/me`, {token})\r\n            .then(response => response.data)\r\n    }\r\n};","import {RegistrationType} from \"../entity-auth\";\r\nimport {AppStateType, InferActionTypes} from \"../../main/bll/store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {authAPI} from \"../api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nlet initialState: RegistrationType = {\r\n    isRegistrationSuccessful: false,\r\n    isRegistrationInProgress: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst registrationReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"registration-reducer/SUCCESS\":\r\n            return {\r\n                ...state,\r\n                isRegistrationSuccessful: action.success,\r\n                isRegistrationInProgress: false\r\n            };\r\n        case \"registration-reducer/PROGRESS\":\r\n            return {\r\n                ...state,\r\n                isRegistrationInProgress: true\r\n            };\r\n        case \"registration-reducer/ERROR\":\r\n            return {\r\n                ...state,\r\n                isRegistrationSuccessful: false,\r\n                isRegistrationInProgress: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setRegistrationSuccess: (success: boolean) => ({type: \"registration-reducer/SUCCESS\", success} as const),\r\n    setRegistrationInProgress: (progress: boolean) => ({type: \"registration-reducer/PROGRESS\", progress} as const),\r\n    setError: () => ({type: \"registration-reducer/ERROR\"} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nexport const registration = (email: string, password: string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(actions.setRegistrationInProgress(true));\r\n            const data = await authAPI.registration(email, password);\r\n            if (data.success)dispatch(actions.setRegistrationSuccess(true));\r\n        } catch (error) {\r\n            dispatch(actions.setError());\r\n            dispatch(stopSubmit(\"signIn\", {_error: error.response.data.error}));\r\n        }\r\n    }\r\n\r\nexport default registrationReducer;","import React from 'react';\r\nimport {H3, Span, TextLink} from \"../../main/ui/style/commonStyle\";\r\nimport {SignUpForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {SignInReduxForm} from \"./SignInForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {registration} from \"./registration-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {LOGIN_PATH} from \"../../main/ui/components/Body\";\r\n\r\nconst SignIn = () => {\r\n    const dispatch = useDispatch();\r\n    const {isRegistrationInProgress, isRegistrationSuccessful} = useSelector((store: AppStateType) => store.registration);\r\n\r\n    const register = (formData: any) => {\r\n        dispatch(registration(formData.email, formData.password))\r\n    }\r\n\r\n    if (isRegistrationSuccessful) return <Redirect to={LOGIN_PATH}/>\r\n\r\n    return (\r\n        <SignUpForm>\r\n            <H3>Create a account</H3>\r\n            <Span>Already have an account?<TextLink to={LOGIN_PATH}>Log in</TextLink></Span>\r\n            <SignInReduxForm onSubmit={register} regInProgress={isRegistrationInProgress}/>\r\n        </SignUpForm>\r\n    )\r\n}\r\n\r\nexport default SignIn;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button, Span, TextLink} from \"../../main/ui/style/commonStyle\";\r\nimport {FormStyled, InputCheckBoxDiv} from \"../../main/ui/style/forForms/formControlsStyle\";\r\nimport {emailValidation, maxLength, requiredField} from \"../../main/ui/components/forForms/validators\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\nimport {RECOVERY_PASSWORD_PATH} from \"../../main/ui/components/Body\";\r\n\r\ntype PropsType = {\r\n    isLoading: boolean\r\n}\r\n\r\nconst maxLength8 = maxLength(8);\r\n\r\nconst LoginForm: React.FC<PropsType & InjectedFormProps<{}, PropsType>>  =\r\n    ({error, handleSubmit, invalid, isLoading, ...props}) => {\r\n    return (\r\n        <FormStyled onSubmit={handleSubmit}>\r\n            <Field name=\"email\" component={Input} type=\"email\" placeholder=\"Email\"\r\n                   validate={[emailValidation, requiredField]} />\r\n            <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\"\r\n                   validate={[requiredField, maxLength8]} />\r\n            <InputCheckBoxDiv>\r\n                <Field name=\"rememberMe\" component={Input} type=\"checkbox\"/>remember me\r\n            </InputCheckBoxDiv>\r\n\r\n            {error && <Span color={\"red\"}>{error}</Span>}\r\n            {isLoading && <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/>}\r\n\r\n            <TextLink to={RECOVERY_PASSWORD_PATH}>Forgot password?</TextLink>\r\n            <Button color={\"blue\"} disabled={invalid || isLoading}>Log in</Button>\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const LoginReduxForm = reduxForm<{}, PropsType>({form: 'login'})(LoginForm)","export const setCookie = (name: string, value: string, age: number) => {\r\n    document.cookie = `${name}=${value};max-age=${age};path=/`;\r\n};\r\n\r\nexport const getCookie = (name: string): string | null => {\r\n    const matches = document.cookie.match(new RegExp(\r\n        '(?:^|; )' + name.replace(/([.$?*|{}()\\]\\\\^])/g, '\\\\$1') + '=([^;]*)'\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : null;\r\n};\r\n","import {AppStateType, InferActionTypes} from \"../../main/bll/store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {authAPI} from \"../api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {setCookie, getCookie} from \"./cookies\";\r\n\r\nexport type LoginType = {// или это\r\n    email: string | null\r\n    userId: string | null\r\n    isAuthorized: boolean\r\n    isLoading: boolean\r\n}\r\n\r\nlet initialState: LoginType = {\r\n    email: null,\r\n    userId: null,\r\n    isAuthorized: false,\r\n    isLoading: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;//или это\r\n\r\nconst loginReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login-reducer/SET_AUTH_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                userId: action.userId,\r\n                isAuthorized: action.isAuthorized\r\n            };\r\n        case \"login-reducer/SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (email: string | null, userId: string | null, isAuthorized: boolean) => ({\r\n        type: \"login-reducer/SET_AUTH_USER_DATA\",\r\n        email, userId, isAuthorized\r\n    } as const),\r\n    setLoading: (isLoading: boolean) => ({type: \"login-reducer/SET_LOADING\", isLoading} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//thunks\r\nexport const login = (email: string, password: string, rememberMe: boolean):\r\n    ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(actions.setLoading(true));\r\n            const response = await authAPI.login(email, password, rememberMe)\r\n            setCookie('token', response.token, Math.floor(response.tokenDeathTime / 1000) - 180);\r\n            dispatch(actions.setAuthUserData(response.email, response._id, true));\r\n            dispatch(actions.setLoading(false));\r\n        } catch (error) {\r\n            dispatch(actions.setAuthUserData(\"\", '', false));\r\n            dispatch(actions.setLoading(false));\r\n            dispatch(stopSubmit(\"login\", {_error: error.response.data.error}));\r\n        }\r\n    }\r\n\r\nexport const getMe = () =>\r\n    async (dispatch: any, getState: () => AppStateType) => {\r\n        try {\r\n            const token = getCookie('token') || '';\r\n            dispatch(actions.setLoading(true));\r\n            console.log(\"token: \" + token);\r\n            const response = await authAPI.getMe(token);\r\n            console.log(response);\r\n            setCookie('token', response.token, Math.floor(response.tokenDeathTime / 1000) - 180);\r\n            console.log(\"NewToken: \" + response.token);\r\n            dispatch(actions.setAuthUserData(response.email, response._id, response.success));\r\n            dispatch(actions.setLoading(false));\r\n        } catch (error) {\r\n            dispatch(actions.setAuthUserData(null, null, false));\r\n            dispatch(actions.setLoading(false));\r\n        }\r\n    }\r\n\r\nexport const logOut = () => {\r\n    return (dispatch: any) => {\r\n\r\n        dispatch(actions.setLoading(true));\r\n        setCookie('token', '', -1000);\r\n        dispatch(actions.setAuthUserData(null, null, false));\r\n        dispatch(actions.setLoading(false));\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default loginReducer;","import React from 'react';\r\nimport {H3, Span, TextLink} from \"../../main/ui/style/commonStyle\";\r\nimport {LoginForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"./login-reducer\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PROFILE_PATH, SIGN_IN_PATH} from \"../../main/ui/components/Body\";\r\n\r\nconst Login: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {isAuthorized, isLoading}  = useSelector((store: AppStateType) => store.login);\r\n\r\n    const onLogin = ({email, password, rememberMe}: any) => {\r\n        dispatch(login(email, password, rememberMe));\r\n    }\r\n\r\n    if (isAuthorized) return <Redirect to={PROFILE_PATH}/>\r\n\r\n    return (\r\n        <LoginForm>\r\n            <H3>Log in with your account</H3>\r\n            <Span>Don't have an account?<TextLink to={SIGN_IN_PATH}>Sign in</TextLink></Span>\r\n            <LoginReduxForm onSubmit={onLogin} isLoading={isLoading}/>\r\n        </LoginForm>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {FormStyled} from \"../../main/ui/style/forForms/formControlsStyle\";\r\nimport {emailValidation, requiredField} from \"../../main/ui/components/forForms/validators\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    isLoading: boolean\r\n}\r\n\r\nconst RecoveryPasswordForm: React.FC<PropsType & InjectedFormProps<{}, PropsType>>  =\r\n        ({error, handleSubmit, invalid, isLoading, ...props}) => {\r\n    return (\r\n        <FormStyled onSubmit={handleSubmit}>\r\n            <Field name=\"email\" component={Input} type=\"email\" placeholder=\"Email\"\r\n                   validate={[emailValidation, requiredField]}\r\n            />\r\n\r\n            {error && <Span color={\"red\"}>{error}</Span>}\r\n            {isLoading && <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/>}\r\n\r\n            <Button color={\"blue\"} disabled={invalid || isLoading}>Reset Password</Button>\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const RecoveryPasswordReduxForm = reduxForm<{}, PropsType>({form: 'recoveryPassword'})(RecoveryPasswordForm)","import {AppStateType, InferActionTypes} from \"../../main/bll/store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {authAPI} from \"../api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type ForgotType = {\r\n    isSendEmail: boolean\r\n    isSaveNewPassword: boolean\r\n    isLoading: boolean\r\n    errorMessage: string\r\n}\r\n\r\nlet initialState: ForgotType = {\r\n    isSendEmail: false,\r\n    isSaveNewPassword: false,\r\n    isLoading: false,\r\n    errorMessage: \"\"\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst recoveryPasswordReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"recoveryPassword-reducer/SET_STATUS_SENT_EMAIL\":\r\n            return {\r\n                ...state,\r\n                isSendEmail: action.isSendEmail\r\n            };\r\n        case \"recoveryPassword-reducer/SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            };\r\n        case \"recoveryPassword-reducer/SET_STATUS_SAVE_NEW_PASSWORD\":\r\n            return {\r\n                ...state,\r\n                isSaveNewPassword: action.isSaveNewPassword\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setStatusSendEmail: (isSendEmail: boolean) => ({\r\n        type: \"recoveryPassword-reducer/SET_STATUS_SENT_EMAIL\",\r\n        isSendEmail\r\n    } as const),\r\n    setStatusSaveNewPassword: (isSaveNewPassword: boolean) => ({\r\n        type: \"recoveryPassword-reducer/SET_STATUS_SAVE_NEW_PASSWORD\",\r\n        isSaveNewPassword\r\n    } as const),\r\n    setLoading: (isLoading: boolean) => ({type: \"recoveryPassword-reducer/SET_LOADING\", isLoading} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//thunks\r\nexport const recoveryPassword = (email: string):\r\n    ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(actions.setLoading(true));\r\n            const response = await authAPI.forgotPassword(email)\r\n            dispatch(actions.setStatusSendEmail(response));\r\n            dispatch(actions.setLoading(false));\r\n        } catch (error) {\r\n            dispatch(actions.setStatusSendEmail(false));\r\n            dispatch(actions.setLoading(false));\r\n            dispatch(stopSubmit(\"recoveryPassword\", {_error: error.response.data.error}));\r\n        }\r\n    }\r\n\r\nexport const setNewPassword = (token: string, password: string):\r\n    ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(actions.setLoading(true));\r\n            const response = await authAPI.setNewPassword(token, password);\r\n            dispatch(actions.setStatusSaveNewPassword(response))\r\n            dispatch(actions.setLoading(false));\r\n        } catch (error) {\r\n            dispatch(actions.setStatusSaveNewPassword(false))\r\n            dispatch(actions.setLoading(false));\r\n            dispatch(stopSubmit(\"newPassword\", {_error: error.response.data.error}));\r\n        }\r\n    }\r\n\r\nexport default recoveryPasswordReducer;","import React from 'react';\r\nimport {H3} from \"../../main/ui/style/commonStyle\";\r\nimport {RecoveryPasswordReduxForm} from './RecoveryPasswordForm';\r\nimport {RecoveryPasswordForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {recoveryPassword} from \"./recoveryPassword-reducer\";\r\n\r\nconst RecoveryPassword: React.FC = () => {\r\n\r\n    const {isSendEmail, isLoading} = useSelector((store: AppStateType) => store.recoveryPassword);\r\n    const dispatch = useDispatch();\r\n\r\n    const onRecoveryPassword = ({email}: any) => {\r\n        dispatch(recoveryPassword(email));\r\n    }\r\n\r\n    return (\r\n        <RecoveryPasswordForm>\r\n            {!isSendEmail?\r\n            <>\r\n                <H3>What's your email?</H3>\r\n                <RecoveryPasswordReduxForm onSubmit={onRecoveryPassword} isLoading={isLoading}/>\r\n            </>\r\n                :\r\n                <H3>Thanks! Check your email for instructions to reset your password.</H3>\r\n            }\r\n\r\n        </RecoveryPasswordForm>\r\n    )\r\n}\r\n\r\nexport default RecoveryPassword;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {FormStyled} from \"../../main/ui/style/forForms/formControlsStyle\";\r\nimport {maxLength, requiredField} from \"../../main/ui/components/forForms/validators\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    isLoading: boolean\r\n}\r\nconst maxLength8 = maxLength(8);\r\n\r\nconst NewPasswordForm: React.FC<PropsType & InjectedFormProps<{}, PropsType>>  =\r\n    ({error, handleSubmit, invalid, isLoading, ...props}) => {\r\n    return (\r\n        <FormStyled onSubmit={handleSubmit}>\r\n            <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\"\r\n                   validate={[requiredField, maxLength8]}\r\n            />\r\n            <Field name=\"repeatPassword\" component={Input} type=\"password\" placeholder=\"Repeat password\"\r\n                   validate={[requiredField, maxLength8]}\r\n            />\r\n\r\n            {error && <Span color={\"red\"}>{error}</Span>}\r\n            {isLoading && <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/>}\r\n\r\n            <Button color={\"blue\"} disabled={invalid || isLoading}>Change password</Button>\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const NewPasswordReduxForm = reduxForm<{}, PropsType>({form: 'newPassword'})(NewPasswordForm)","import React from 'react';\r\nimport {H3} from \"../../main/ui/style/commonStyle\";\r\nimport {NewPasswordForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {NewPasswordReduxForm} from \"./NewPasswordForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {setNewPassword} from \"../recoveryPassword/recoveryPassword-reducer\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {LOGIN_PATH} from \"../../main/ui/components/Body\";\r\n\r\nconst NewPassword: React.FC = (props: any) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {isSaveNewPassword, isLoading} = useSelector((store: AppStateType) => store.recoveryPassword);\r\n\r\n    const onSetNewPassword = ({password, repeatPassword}: any) => {\r\n        if (password === repeatPassword) {\r\n            debugger\r\n            let token = props.match.params.token;\r\n            dispatch(setNewPassword(token, password));\r\n        } else dispatch(stopSubmit(\"newPassword\", {_error: 'Password mismatch'}));\r\n    }\r\n\r\n    if (isSaveNewPassword) return <Redirect to={LOGIN_PATH}/>\r\n\r\n    return (\r\n        <NewPasswordForm>\r\n            <H3>Enter new password</H3>\r\n            <NewPasswordReduxForm onSubmit={onSetNewPassword} isLoading={isLoading}/>\r\n        </NewPasswordForm>\r\n    )\r\n}\r\n\r\nexport default NewPassword;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://cards-nya-back.herokuapp.com/1.0/'\r\n});\r\n\r\nexport type CommonResponseType = {\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n}\r\n\r\nexport type CardPackType = {\r\n    _id: string,\r\n    user_id: string,\r\n    name: string,\r\n    path: string,\r\n    grade: number,\r\n    shots: number,\r\n    rating: number,\r\n    type: string,\r\n    created: string,\r\n    updated: string,\r\n    __v: number\r\n};\r\n\r\nexport type GetDecksType = {\r\n    cardPacks: Array<CardPackType>,\r\n    cardPacksTotalCount: number,\r\n    maxGrade: string,\r\n    minGrade: number,\r\n    page: number\r\n    pageCount: number,\r\n    token: string,\r\n    tokenDeathTime: number\r\n};\r\n\r\nexport type PostOrPutCardsPackType = {\r\n    user_id: string | null,\r\n    name?: string,\r\n    path?: string,\r\n    grade?: string,\r\n    shots?: string,\r\n    rating?: string,\r\n    type?: string,\r\n};\r\n\r\nexport type PostOrPutDeckType = {\r\n    cardsPack: PostOrPutCardsPackType,\r\n    token: string | null\r\n};\r\n\r\nexport type PostDeckResponseType = {\r\n    newCardsPack: {},\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number\r\n};\r\n\r\nexport type DeleteDeckResponseType = {\r\n    deletedCardsPack: { _id: string },\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n};\r\n\r\nexport type PutDeckResponseType = {\r\n    updatedCardsPack: {},\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n}\r\n\r\nexport const decksAPI = {\r\n    getDecks: (token: string | null, userID: string | null) => (\r\n        instance.get<GetDecksType>(`cards/pack?&token=${token}&user_id=${userID}&pageCount=6`)\r\n            .then(res => res.data)\r\n    ),\r\n    deleteDeck: (token: string | null, id: string) =>\r\n        (instance.delete<DeleteDeckResponseType>(`cards/pack?&token=${token}&id=${id}`).then(res => res.data)),\r\n    postDeck: (object: PostOrPutDeckType) => (instance.post<PostDeckResponseType>(`cards/pack`, object).then(res => res.data)),\r\n    putDeck: (object: PostOrPutDeckType) => (instance.post<PostDeckResponseType>(`cards/pack`, object).then(res => res.data)),\r\n}\r\n\r\nexport type CardType = {\r\n    _id: string,\r\n    answer: string,\r\n    question: string,\r\n    cardsPack_id: string,\r\n    grade: number,\r\n    rating: number,\r\n    shots: number,\r\n    type: string,\r\n    created: string,\r\n    updated: string,\r\n    __v: number\r\n};\r\n\r\nexport type GetCardsType = {\r\n    cards: Array<CardType>,\r\n    cardsTotalCount: number,\r\n    maxGrade: string,\r\n    minGrade: number,\r\n    page: number\r\n    pageCount: number,\r\n    token: string,\r\n    tokenDeathTime: number\r\n};\r\n\r\nexport type DeleteCardResponseType = {\r\n    deletedCard: { _id: string },\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n};\r\n\r\nexport const cardsAPI = {\r\n    getCards: (token: string | null, deckId: string) => (\r\n        instance.get<GetCardsType>(`cards/card?&token=${token}&cardsPack_id=${deckId}`)\r\n            .then(res => res.data)\r\n    ),\r\n    deleteCard: (token: string | null, id: string) =>\r\n        (instance.delete<DeleteCardResponseType>(`cards/card?&token=${token}&id=${id}`)\r\n            .then(res => res.data)),\r\n    // postDeck: (object: PostOrPutDeckType) => (instance.post<PostDeckResponseType>(`cards/pack`, object).then(res => res.data)),\r\n    // putDeck: (object: PostOrPutDeckType) => (instance.post<PostDeckResponseType>(`cards/pack`, object).then(res => res.data)),\r\n}","import {AppStateType, InferActionTypes} from \"../../main/bll/store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {CardPackType, decksAPI, GetDecksType, PostOrPutCardsPackType} from \"../api\";\r\nimport {getCookie, setCookie} from \"../../01-auth/login/cookies\";\r\n\r\ntype DecksType = {\r\n    cardPacks: Array<CardPackType>,\r\n    cardPacksTotalCount: number,\r\n    maxGrade: string,\r\n    minGrade: number,\r\n    page: number\r\n    pageCount: number,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n    isLoading: boolean\r\n}\r\n\r\nlet initialState: DecksType = {\r\n    cardPacks: [],\r\n    cardPacksTotalCount: 0,\r\n    maxGrade: '',\r\n    minGrade: 0,\r\n    page: 0,\r\n    pageCount: 0,\r\n    token: '',\r\n    tokenDeathTime: 0,\r\n    isLoading: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst cardDecksReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cardDeckReducer/SET_DECK\":\r\n            return {\r\n                ...state,\r\n                ...action.decks,\r\n                cardPacks: action.decks.cardPacks.map(cardPack => ({...cardPack})),\r\n                isLoading: false\r\n            };\r\n        case \"cardDeckReducer/DELETE_DECK\":\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.filter((cardPack) => cardPack._id !== action.id),\r\n                isLoading: false\r\n            }\r\n        case \"cardDeckReducer/LOADING_STATUS\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setDecks: (decks: GetDecksType) => ({type: \"cardDeckReducer/SET_DECK\", decks} as const),\r\n    deleteDeck: (id: string) => ({type: \"cardDeckReducer/DELETE_DECK\", id} as const),\r\n    setLoadingStatus: (isLoading: boolean) => ({type: \"cardDeckReducer/LOADING_STATUS\", isLoading} as const),\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>;\r\n\r\nexport const getDecks = (): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any, getState: () => AppStateType) => {\r\n        let userID = getState().login.userId;\r\n        dispatch(actions.setLoadingStatus(true));\r\n        let token = getCookie('token');\r\n        let data = await decksAPI.getDecks(token, userID);\r\n        setCookie('token', data.token, Math.floor(data.tokenDeathTime / 1000) - 180);\r\n        dispatch(actions.setDecks(data))\r\n    };\r\n\r\nexport const deleteDeck = (id: string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        dispatch(actions.setLoadingStatus(true));\r\n        let token = getCookie('token');\r\n        let data = await decksAPI.deleteDeck(token, id);\r\n        setCookie('token', data.token, Math.floor(data.tokenDeathTime / 1000) - 180);\r\n        if (data.success) dispatch(actions.deleteDeck(data.deletedCardsPack._id))\r\n    };\r\n\r\nexport const addDeck = (newPack: PostOrPutCardsPackType): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        dispatch(actions.setLoadingStatus(true));\r\n        let token = getCookie('token');\r\n        let newDeck = {\r\n            cardsPack: newPack,\r\n            token\r\n        };\r\n        let data = await decksAPI.postDeck(newDeck);\r\n        setCookie('token', data.token, Math.floor(data.tokenDeathTime / 1000) - 180);\r\n        dispatch(getDecks());\r\n    };\r\n\r\nexport default cardDecksReducer;","import React from \"react\";\r\nimport styled from \"styled-components/macro\";\r\nimport {CardPackType} from \"../api\";\r\nimport {InfoHeader, Name} from \"./cardDecks\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const DeckWrapper = styled.div`\r\n  padding: 10px 0;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  border-top: 2px solid #e8e8e8;\r\n  background-color: #fff;\r\n`;\r\n\r\n// const DeleteButton = styled.button`\r\n//   width: 100px;\r\n//   height: 50px;\r\n//   margin-left: 5px;\r\n//   text-align: left;\r\n//   line-height: 50px;\r\n//   background-color: coral;\r\n//   border-radius: 10px;\r\n//   cursor: pointer;\r\n// `;\r\n\r\nexport const ActionsMenu = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  font-size: 15px;\r\n`;\r\n\r\nexport const Action = styled.div<{backgroundColor: string}>`\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  background-color: ${props => props.backgroundColor};\r\n  padding: 2px 15px;\r\n  margin-bottom: 5px;\r\n  font-size: 14px;\r\n  \r\n  &:hover {\r\n   //color: #32cdff;\r\n   opacity: .8;\r\n  }\r\n`;\r\nexport const NameDeckNavLink = styled(NavLink)`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    //font-size: 15px;\r\n    color: #32cdff;\r\n    text-decoration: none;\r\n    opacity: .8;\r\n    cursor: pointer;\r\n    \r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\ntype PropsType = CardPackType & AdditionalPropsType;//тут куча пропсов\r\n\r\ntype AdditionalPropsType = {\r\n    deletePack: (id: string) => void\r\n}\r\n\r\nconst Deck = ({_id, name, grade, shots, rating, deletePack, ...props}: PropsType) => {\r\n    return (\r\n        <DeckWrapper>\r\n            <Name>\r\n                <NameDeckNavLink to={`/profile/cards/${_id}`}>\r\n                    {name}\r\n                </NameDeckNavLink>\r\n                </Name>\r\n            <InfoHeader>{grade}</InfoHeader>\r\n            <InfoHeader>{shots}</InfoHeader>\r\n            <InfoHeader>{rating}</InfoHeader>\r\n            <ActionsMenu>\r\n                <Action backgroundColor={\"#ff506480\"} onClick={() => deletePack(_id)}>Delete</Action>\r\n                <Action backgroundColor={\"#ffff0080\"}>Change</Action>\r\n            </ActionsMenu>\r\n        </DeckWrapper>\r\n    )\r\n}\r\n\r\nexport default Deck","import React from \"react\";\r\nimport styled from \"styled-components/macro\";\r\nimport Deck from \"./deck\";\r\nimport {CardPackType} from \"../api\";\r\n\r\nexport const DecksWrapper = styled.div`\r\n  width: 100%;\r\n  border: 2px solid #e8e8e8;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const DeckHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  color: #c4c4c4;\r\n  background: #f7f7f7;\r\n  padding: 10px 0;\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n`;\r\n\r\nexport const Name = styled.div`\r\n  margin-left: 15px;\r\n  text-align: left;\r\n  font-size: 18px;\r\n  flex-basis: 30%;\r\n`;\r\n\r\nexport const InfoHeader = styled(Name)`\r\n  flex-basis: 10%;\r\n`;\r\n\r\ntype PropsType = {\r\n    decks: Array<CardPackType>,\r\n    deletePack: (id: string) => void\r\n}\r\n\r\nconst CardDecks = ({decks, deletePack}: PropsType) => {\r\n    return (\r\n        <DecksWrapper>\r\n            <DeckHeader>\r\n                <Name>Deck name</Name>\r\n                <InfoHeader>Grade</InfoHeader>\r\n                <InfoHeader>Shots</InfoHeader>\r\n                <InfoHeader>Rating</InfoHeader>\r\n                <InfoHeader>Actions</InfoHeader>\r\n            </DeckHeader>\r\n            {decks.map(deck => <Deck key={deck._id} {...deck} deletePack={deletePack}/>)}\r\n        </DecksWrapper>\r\n    )\r\n}\r\n\r\nexport default CardDecks","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button, Span} from \"../../main/ui/style/commonStyle\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\nimport styled from \"styled-components/macro\";\r\n\r\ntype PropsType = {\r\n    isLoading: boolean\r\n}\r\n\r\nconst FormStyled = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    max-width: 300px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nconst AddDeckForm: React.FC<PropsType & InjectedFormProps<{}, PropsType>>  =\r\n    ({error, handleSubmit, isLoading, ...props}) => {\r\n        return (\r\n            <FormStyled onSubmit={handleSubmit}>\r\n                <Field name=\"name\" component={Input} type=\"Name\" placeholder=\"Name\"/>\r\n                {error && <Span color={\"red\"}>{error}</Span>}\r\n                {isLoading && <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/>}\r\n                <Button color={\"blue\"} disabled={isLoading}>Add deck</Button>\r\n            </FormStyled>\r\n        );\r\n    };\r\n\r\nexport const AddDeckReduxForm = reduxForm<{}, PropsType>({form: 'add deck'})(AddDeckForm)","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {addDeck, deleteDeck, getDecks} from \"./cardDecksReducer\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\nimport CardDecks from \"./cardDecks\";\r\nimport {AddDeckReduxForm} from \"./addDeckForm\";\r\nimport styled from \"styled-components/macro\";\r\n\r\nconst CardDecksContainer = () => {\r\n\r\n    const isLoading = useSelector((store: AppStateType) => store.cardDecksReducer.isLoading);\r\n    const decks = useSelector((store: AppStateType) => store.cardDecksReducer.cardPacks);\r\n    const {cardPacksTotalCount} = useSelector((store: AppStateType) => store.cardDecksReducer);\r\n    const userId = useSelector((store: AppStateType) => store.login.userId);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getDecks())\r\n    }, [dispatch]);\r\n\r\n    const deletePack = (id: string) => {\r\n        dispatch(deleteDeck(id))\r\n    };\r\n    const addPack = ({name}: any) => {\r\n        let newPack = {\r\n            user_id: userId,\r\n            name,\r\n        }\r\n        dispatch(addDeck(newPack))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/> :\r\n                <Wrapper>\r\n                    {cardPacksTotalCount}\r\n                    <AddDeckReduxForm onSubmit={addPack} isLoading={isLoading}/>\r\n                    <CardDecks decks={decks} deletePack={deletePack}/>\r\n                </Wrapper>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardDecksContainer\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  width: 100%;\r\n`;","import {AppStateType, InferActionTypes} from \"../../main/bll/store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {cardsAPI, CardType, GetCardsType} from \"../api\";\r\nimport {getCookie, setCookie} from \"../../01-auth/login/cookies\";\r\n\r\ntype CardsType = {\r\n    cards: Array<CardType>,\r\n    cardsTotalCount: number,\r\n    maxGrade: string,\r\n    minGrade: number,\r\n    page: number\r\n    pageCount: number,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n    isLoading: boolean\r\n}\r\n\r\nlet initialState: CardsType = {\r\n    cards: [],\r\n    cardsTotalCount: 0,\r\n    maxGrade: '',\r\n    minGrade: 0,\r\n    page: 0,\r\n    pageCount: 0,\r\n    token: '',\r\n    tokenDeathTime: 0,\r\n    isLoading: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst cardsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cardsReducer/SET_CARDS\":\r\n            return {\r\n                ...state,\r\n                ...action.cards,\r\n                // cards: action.cards.cards,\r\n                cards: action.cards.cards.map(card => ({...card})),\r\n                isLoading: false\r\n            };\r\n        case \"cardsReducer/DELETE_CARD\":\r\n            return {\r\n                ...state,\r\n                cards: state.cards.filter((card) => card._id !== action.id),\r\n                isLoading: false\r\n            }\r\n        case \"cardsReducer/LOADING_STATUS\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setCards: (cards: GetCardsType) => ({type: \"cardsReducer/SET_CARDS\", cards} as const),\r\n    deleteCard: (id: string) => ({type: \"cardsReducer/DELETE_CARD\", id} as const),\r\n    setLoadingStatus: (isLoading: boolean) => ({type: \"cardsReducer/LOADING_STATUS\", isLoading} as const),\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>;\r\n\r\nexport const getCards = (deckId: string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        dispatch(actions.setLoadingStatus(true));\r\n        let token = getCookie('token');\r\n        let data = await cardsAPI.getCards(token, deckId);\r\n        setCookie('token', data.token, Math.floor(data.tokenDeathTime / 1000) - 180);\r\n        dispatch(actions.setCards(data))\r\n    };\r\n\r\nexport const deleteCard = (id: string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        dispatch(actions.setLoadingStatus(true));\r\n        let token = getCookie('token');\r\n        let data = await cardsAPI.deleteCard(token, id);\r\n        setCookie('token', data.token, Math.floor(data.tokenDeathTime / 1000) - 180);\r\n        if (data.success) dispatch(actions.deleteCard(data.deletedCard._id))\r\n    };\r\n\r\nexport default cardsReducer;","import React from \"react\";\r\nimport {CardType} from \"../api\";\r\nimport {InfoHeader, Name} from \"../cardDecks/cardDecks\";\r\nimport {ActionsMenu, DeckWrapper, Action} from \"../cardDecks/deck\";\r\n\r\ntype PropsType = CardType & AdditionalPropsType;//тут куча пропсов\r\n\r\ntype AdditionalPropsType = {\r\n    deleteCard: (id: string) => void\r\n}\r\n\r\nconst Card = ({_id, question, grade, shots, rating, deleteCard, ...props}: PropsType) => {\r\n    return (\r\n        <DeckWrapper>\r\n            <Name>{question}</Name>\r\n            <InfoHeader>{grade}</InfoHeader>\r\n            <InfoHeader>{shots}</InfoHeader>\r\n            <InfoHeader>{rating}</InfoHeader>\r\n            <ActionsMenu>\r\n                <Action backgroundColor={\"#ff506480\"} onClick={() => deleteCard(_id)}>Delete</Action>\r\n                <Action backgroundColor={\"#ffff0080\"}>Change</Action>\r\n            </ActionsMenu>\r\n        </DeckWrapper>\r\n    )\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\nimport {CardType} from \"../api\";\r\nimport Card from \"./Card\";\r\nimport {DeckHeader, DecksWrapper, InfoHeader, Name} from \"../cardDecks/cardDecks\";\r\n\r\ntype PropsType = {\r\n    cards: Array<CardType>,\r\n    deleteCard: (id: string) => void\r\n}\r\n\r\nconst CardsOfDecks = ({cards, deleteCard}: PropsType) => {\r\n    return (\r\n        <DecksWrapper>\r\n            <DeckHeader>\r\n                <Name>Question</Name>\r\n                <InfoHeader>Grade</InfoHeader>\r\n                <InfoHeader>Shots</InfoHeader>\r\n                <InfoHeader>Rating</InfoHeader>\r\n                <InfoHeader>Actions</InfoHeader>\r\n            </DeckHeader>\r\n            {cards.map(card => <Card key={card._id} {...card} deleteCard={deleteCard}/>)}\r\n        </DecksWrapper>\r\n    )\r\n}\r\n\r\nexport default CardsOfDecks","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\nimport {getCards, deleteCard} from \"./cardsReducer\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CardsOfDecks from \"./CardsOfDeck\";\r\n\r\nconst CardsContainer: React.FC = (props: any) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {isLoading} = useSelector((store: AppStateType) => store.cards);\r\n    const cards = useSelector((store: AppStateType) => store.cards.cards);\r\n    let deckId = props.match.params.deckId;\r\n\r\n    useEffect(() => {\r\n        dispatch(getCards(deckId))\r\n    }, [dispatch, deckId]);\r\n\r\n    const onDeleteCard = (id: string) => {\r\n        dispatch(deleteCard(id));\r\n        // console.log(\"need delete card\")\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/> :\r\n                <CardsOfDecks cards={cards} deleteCard={onDeleteCard}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default compose(\r\n    withRouter\r\n)(CardsContainer)\r\n\r\n// export default CardsContainer\r\n","import React from 'react';\r\nimport styled from \"styled-components/macro\";\r\nimport {Button, H1} from \"../../main/ui/style/commonStyle\";\r\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\r\nimport {fas} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {IconDiv} from \"../../main/ui/style/headerStyle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logOut} from \"../login/login-reducer\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {CARDS_PATH_WITH_USER, LOGIN_PATH, PROFILE_PATH} from \"../../main/ui/components/Body\";\r\nimport {MainContainer} from \"../../main/ui/style/bodyStyle\";\r\nimport noUserPhoto from '../../main/ui/images/no-user-photo.jpg'\r\nimport CardDecksContainer from \"../../02-tables/cardDecks/cardDecksContainer\";\r\nimport CardsContainer from \"../../02-tables/cards/cardsContainer\";\r\n\r\nlibrary.add(fas);\r\n\r\nconst Profile: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {isAuthorized, email} = useSelector((store: AppStateType) => store.login);\r\n\r\n    const onLogOut = () => {\r\n        dispatch(logOut());\r\n    }\r\n    if (!isAuthorized)\r\n        return <Redirect to={LOGIN_PATH}/>;\r\n\r\n    return (\r\n        <ProfileContainer>\r\n            <UserCardInfo>\r\n                <UserPhoto src={noUserPhoto} alt=\"no user photo\"/>\r\n                {/*userName*/}\r\n                <H1>{email}</H1>\r\n                <Line />\r\n                <Button color={\"blue\"} onClick={onLogOut}>\r\n                    <IconDiv><FontAwesomeIcon icon={['fas', 'sign-out-alt']}/></IconDiv>\r\n                    Log out\r\n                </Button>\r\n            </UserCardInfo>\r\n            <UserDecksInfoContainer>\r\n                <Route path={CARDS_PATH_WITH_USER}>\r\n                    <CardsContainer/>\r\n                </Route>\r\n                <Route exact path={PROFILE_PATH}>\r\n                    <CardDecksContainer/>\r\n                </Route>\r\n            </UserDecksInfoContainer>\r\n\r\n\r\n        </ProfileContainer>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\nconst ProfileContainer = styled(MainContainer)`\r\n  align-items: flex-start;\r\n  justify-content: left;\r\n`;\r\nconst UserDecksInfoContainer = styled(MainContainer)`\r\n  background-color: #fff;\r\n  //border-radius: 15px;\r\n  margin-left: 64px;\r\n  max-width: 776px;\r\n  //vertical-align: top;\r\n  //width: 776px;\r\n  padding: 40px 30px;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n`;\r\n\r\nconst UserCardInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst UserPhoto = styled.img`\r\n  border: 5px solid #fff;\r\n  border-radius: 100%;\r\n  height: 120px;\r\n  margin: auto;\r\n  width: 120px;\r\n`;\r\n\r\nconst Line = styled.div`\r\n  background-color: #e8e8e8;\r\n  height: 1px;\r\n  margin: 15px 0;\r\n  width: 100%;\r\n`;\r\n","import React from 'react';\r\nimport {MainContainer, MainWrapper} from '../style/bodyStyle';\r\nimport SignIn from \"../../../01-auth/registration/SignIn\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport Login from \"../../../01-auth/login/Login\";\r\nimport RecoveryPassword from \"../../../01-auth/recoveryPassword/RecoveryPassword\";\r\nimport NewPassword from \"../../../01-auth/newPassword/NewPassword\";\r\nimport Profile from \"../../../01-auth/profile/Profile\";\r\n\r\nexport const LOGIN_PATH = '/login';\r\nexport const SIGN_IN_PATH = '/signIn';\r\nexport const PROFILE_PATH = '/profile';\r\nexport const RECOVERY_PASSWORD_PATH = '/recoveryPassword';\r\nexport const NEW_PASSWORD_PATH = '/newPassword/:token?'\r\nexport const CARD_DECKS_PATH = '/cardDecks';\r\nexport const CARDS_PATH_WITH_USER = '/profile/cards/:deckId?';\r\n// export const CARDS_PATH = '/cards';\r\n\r\nconst Body: React.FC = () => {\r\n    return (\r\n        <MainWrapper>\r\n\r\n            {/*?????????*/}\r\n            <Route exact path={'/cards'} render={() => <Redirect to={LOGIN_PATH}/>}/>\r\n\r\n            <Route path={SIGN_IN_PATH}>\r\n                <MainContainer whiteBox>\r\n                    <SignIn/>\r\n                </MainContainer>\r\n            </Route>\r\n            <Route path={LOGIN_PATH}>\r\n                <MainContainer whiteBox>\r\n                    <Login/>\r\n                </MainContainer>\r\n            </Route>\r\n            <Route path={RECOVERY_PASSWORD_PATH}>\r\n                <MainContainer whiteBox>\r\n                    <RecoveryPassword/>\r\n                </MainContainer>\r\n            </Route>\r\n            <Route path={NEW_PASSWORD_PATH}>\r\n                <MainContainer whiteBox>\r\n                    <NewPassword/>\r\n                </MainContainer>\r\n            </Route>\r\n            {/*<Route path={CARD_DECKS_PATH}>*/}\r\n            {/*    <MainContainer>*/}\r\n            {/*        <CardDecksContainer/>*/}\r\n            {/*    </MainContainer>*/}\r\n            {/*</Route>*/}\r\n            {/*<Route path={CARDS_PATH_WITH_USER}>*/}\r\n            {/*    <MainContainer>*/}\r\n            {/*        <CardsContainer/>*/}\r\n            {/*    </MainContainer>*/}\r\n            {/*</Route>*/}\r\n\r\n            <Route path={PROFILE_PATH} component={Profile} />\r\n\r\n            {/*<MainContainer>*/}\r\n            {/*    <Route path={SIGN_IN_PATH} component={SignIn}/>*/}\r\n            {/*    <Route path={LOGIN_PATH} component={Login}/>*/}\r\n            {/*    <Route path={PROFILE_PATH} component={Profile}/>*/}\r\n            {/*    <Route path={RECOVERY_PASSWORD_PATH} component={RecoveryPassword}/>*/}\r\n            {/*    <Route path={NEW_PASSWORD_PATH} component={NewPassword}/>*/}\r\n\r\n            {/*    <Route path={CARD_DECKS_PATH} component={CardDecksContainer}/>*/}\r\n            {/*    /!*<Route path={cards} component={CardsContainer}/>*!/*/}\r\n            {/*    /!*<Route exact path='/' render={() => <App/>}/>*!/*/}\r\n            {/*    /!*<Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>*!/*/}\r\n            {/*</MainContainer>*/}\r\n\r\n        </MainWrapper>\r\n    )\r\n}\r\n\r\nexport default Body;\r\n","import React from 'react';\r\nimport {\r\n    HeaderContainer,\r\n    HeaderWrapper,\r\n    IconDiv,\r\n    LogoImg,\r\n    LogoLinkBlock,\r\n    LogoText,\r\n    MenuNavLink\r\n} from \"../style/headerStyle\";\r\nimport logo from '../images/logo.png'\r\nimport {Button, FlexRowCenter} from '../style/commonStyle';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {LOGIN_PATH, PROFILE_PATH} from './Body';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\r\nimport {far} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nlibrary.add(far);\r\n\r\nconst Header: React.FC = () => {\r\n\r\n    const {isAuthorized, email} = useSelector((store: AppStateType) => store.login);\r\n\r\n    return (\r\n        <HeaderWrapper>\r\n            <HeaderContainer>\r\n                <LogoLinkBlock>\r\n                    {/*<LogoLinkBlock as={NavLink} to='/login'>*/}\r\n                    <LogoImg src={logo} alt=\"logo\"/>\r\n                    <LogoText>cards</LogoText>\r\n                </LogoLinkBlock>\r\n                <FlexRowCenter>\r\n                    {/*<MenuNavLink to={loginPath}>Log in</MenuNavLink>*/}\r\n                    {/*<MenuNavLink to={recoveryPasswordPath}>Recovery</MenuNavLink>*/}\r\n                    {/*<MenuNavLink to={newPasswordPath}>New password</MenuNavLink>*/}\r\n                    {/*<MenuNavLink to={profilePath}>Profile</MenuNavLink>*/}\r\n                    {/*<MenuNavLink to={CARD_DECKS_PATH}>Decks</MenuNavLink>*/}\r\n\r\n\r\n                    {isAuthorized ?\r\n                        <MenuNavLink to={PROFILE_PATH}>\r\n                            <IconDiv><FontAwesomeIcon icon={['far', 'user']}/></IconDiv>\r\n                            {/*User*/}\r\n                            {email}\r\n                        </MenuNavLink>\r\n                        :\r\n                        <Button as={NavLink} to={LOGIN_PATH} color={\"white\"}>Log in</Button>\r\n                    }\r\n                </FlexRowCenter>\r\n            </HeaderContainer>\r\n        </HeaderWrapper>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import {InferActionTypes} from \"./store\";\r\nimport {getMe} from \"../../01-auth/login/login-reducer\";\r\n\r\n// export type InitializationType = {// или это\r\n//     isInitializedApp: boolean\r\n// }\r\n\r\nlet initialState = {\r\n    isInitializedApp: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"app-reducer/INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                isInitializedApp: action.isInitializedApp\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setInitializationStatus: (isInitializedApp: boolean) => ({type: \"app-reducer/INITIALIZED\", isInitializedApp} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nexport const initializationApp = () => {\r\n    return (dispatch: any) => {\r\n        let promise = dispatch(getMe());\r\n\r\n        promise.then(() => {\r\n            dispatch(actions.setInitializationStatus(true));\r\n        })\r\n    }\r\n}\r\n\r\nexport default appReducer;","import React, {useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from \"./components/Header\";\r\nimport Body from \"./components/Body\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../bll/store\";\r\nimport Preloader from \"./components/preloader/Preloader\";\r\nimport {initializationApp} from \"../bll/app-reducer\";\r\n\r\nconst AppWrapper = styled.div`\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {isInitializedApp}  = useSelector((store: AppStateType) => store.app);\r\n    const {isLoading}  = useSelector((store: AppStateType) => store.login);\r\n\r\n    useEffect(()=>{\r\n        console.log(\"initializationApp\");\r\n        dispatch(initializationApp());\r\n    },[dispatch])\r\n\r\n    if (!isInitializedApp) return <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/>\r\n\r\n    return (\r\n        <>\r\n            <AppWrapper>\r\n                <Header/>\r\n                <Body/>\r\n            </AppWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AuthorizationType} from \"../entity-auth\";\r\nimport {InferActionTypes} from \"../../main/bll/store\";\r\n\r\nexport type ForgotType = {\r\n    isSendEmail: boolean\r\n    isLoading: boolean\r\n    errorMessage: string\r\n}\r\n\r\nlet initialState: AuthorizationType = {\r\n    email: '',\r\n    isAuthorized: false,\r\n    isLoading: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst newPasswordReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n                // isAuth: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId:number, email:string, login:string) =>\r\n        ({type: \"LOGIN\", data: {userId, email, login}})\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//example thunk\r\n\r\n// export const login = (email:string, password:string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n//     async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>, getState: () => AppStateType) => {\r\n//         const response = await authAPI.login(email, password)\r\n//         if (response.resultCode === 0) {\r\n//             dispatch(actions.setAuthUserData(response.data.data.userId, response.data.data.email, response.data.data.login))\r\n//         }\r\n//         else{\r\n//             let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n//             dispatch(stopSubmit(\"login\", {_error: message}));\r\n//         }\r\n//     }\r\n\r\n// example thunk from socialNetwork\r\n\r\n// export const logout = () => {\r\n//     return (dispatch) => {\r\n//         authAPI.logout()\r\n//             .then(response => {\r\n//                 debugger\r\n//                 if (response.resultCode === 0) {\r\n//                     dispatch(setAuthUserData(null, null, null, false));\r\n//                 }\r\n//             });\r\n//     }\r\n// };\r\n\r\nexport default newPasswordReducer;","import {AuthorizationType} from \"../entity-auth\";\r\nimport {InferActionTypes} from \"../../main/bll/store\";\r\n\r\nlet initialState: AuthorizationType = {\r\n    email: '',\r\n    isAuthorized: false,\r\n    isLoading: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n                // isAuth: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId:number, email:string, login:string) =>\r\n        ({type: \"LOGIN\", data: {userId, email, login}})\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//example thunk\r\n\r\n// export const login = (email:string, password:string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n//     async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>, getState: () => AppStateType) => {\r\n//         const response = await authAPI.login(email, password)\r\n//         if (response.resultCode === 0) {\r\n//             dispatch(actions.setAuthUserData(response.data.data.userId, response.data.data.email, response.data.data.login))\r\n//         }\r\n//         else{\r\n//             let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n//             dispatch(stopSubmit(\"login\", {_error: message}));\r\n//         }\r\n//     }\r\n\r\n// example thunk from socialNetwork\r\n\r\n// export const logout = () => {\r\n//     return (dispatch) => {\r\n//         authAPI.logout()\r\n//             .then(response => {\r\n//                 debugger\r\n//                 if (response.resultCode === 0) {\r\n//                     dispatch(setAuthUserData(null, null, null, false));\r\n//                 }\r\n//             });\r\n//     }\r\n// };\r\n\r\nexport default profileReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport loginReducer from \"../../01-auth/login/login-reducer\";\r\nimport registrationReducer from \"../../01-auth/registration/registration-reducer\";\r\nimport newPasswordReducer from \"../../01-auth/newPassword/newPassword-reducer\";\r\nimport recoveryPasswordReducer from \"../../01-auth/recoveryPassword/recoveryPassword-reducer\";\r\nimport profileReducer from \"../../01-auth/profile/profile-reducer\";\r\nimport cardDecksReducer from \"../../02-tables/cardDecks/cardDecksReducer\";\r\nimport cardsReducer from \"../../02-tables/cards/cardsReducer\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login:loginReducer,\r\n    registration: registrationReducer,\r\n    newPassword: newPasswordReducer,\r\n    recoveryPassword: recoveryPasswordReducer,\r\n    profile: profileReducer,\r\n    cardDecksReducer: cardDecksReducer,\r\n    cards: cardsReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends {[key: string]: (...args:any)=> any}> = ReturnType<PropertiesType<T>>\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from './main/bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\ndeclare const window: any;\r\nwindow.store = store;\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}