{"version":3,"sources":["main/ui/images/logo.png","main/ui/style/commonStyle.ts","main/ui/style/headerStyle.ts","main/ui/style/bodyStyle.ts","main/ui/style/forForms/formsStyle.ts","main/ui/style/forForms/formControlsStyle.ts","main/ui/components/forForms/FormsControls.tsx","main/ui/components/forForms/validators.ts","main/ui/components/preloader/Preloader.tsx","01-auth/registration/SignInForm.tsx","01-auth/api.ts","01-auth/registration/registration-reducer.ts","01-auth/registration/SignIn.tsx","01-auth/login/LoginForm.tsx","01-auth/login/login-reducer.ts","01-auth/login/Login.tsx","01-auth/recoveryPassword/RecoveryPasswordForm.tsx","01-auth/recoveryPassword/RecoveryPassword.tsx","01-auth/newPassword/NewPasswordForm.tsx","01-auth/newPassword/NewPassword.tsx","01-auth/profile/Profile.tsx","main/ui/components/Body.tsx","main/ui/components/Header.tsx","main/ui/App.tsx","serviceWorker.ts","01-auth/newPassword/newPassword-reducer.ts","01-auth/recoveryPassword/recoveryPassword-reducer.ts","01-auth/profile/profile-reducer.ts","main/bll/store.ts","index.tsx"],"names":["module","exports","H3","styled","h3","Span","p","props","color","BlockWrapper","div","FlexRowCenter","ContainerWrapper","Button","button","HeaderWrapper","HeaderContainer","LogoLinkBlock","LogoImg","img","LogoText","span","MenuNavLink","NavLink","MainWrapper","MainContainer","SignUpForm","LoginForm","RecoveryPasswordForm","NewPasswordForm","FormStyled","form","InputCheckBoxDiv","InputStyled","input","hasError","type","Input","meta","placeholder","touched","error","placeholderText","errorText","requiredField","value","emailValidation","test","undefined","Preloader","size","backColor","frontColor","isLoading","loading","SignInReduxForm","reduxForm","handleSubmit","regInProgress","onSubmit","Field","name","component","validate","instance","axios","create","baseURL","authAPI","email","password","post","then","response","data","rememberMe","initialState","isRegistrationSuccessful","isRegistrationInProgress","actions","success","progress","registrationReducer","state","action","SignIn","dispatch","useDispatch","regSuccess","useSelector","store","registration","to","loginPath","formData","a","stopSubmit","_error","LoginReduxForm","submitting","disabled","isAuth","isloading","errorMessage","loginReducer","Login","login","history","useHistory","onLogin","useCallback","useEffect","push","profilePath","RecoveryPasswordReduxForm","RecoveryPassword","NewPasswordReduxForm","NewPassword","Profile","Body","path","Header","src","logo","alt","as","AppWrapper","App","Boolean","window","location","hostname","match","idUser","newPasswordReducer","recoveryPasswordReducer","profileReducer","rootReducer","combineReducers","newPassword","recoveryPassword","profile","formReducer","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cbc7f560.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3a344931.png\";","import styled from 'styled-components/macro';\r\nimport React from \"react\";\r\n\r\nexport const H3 = styled.h3`\r\n    font-size: 21px;\r\n    text-align: center;\r\n    color: #5c5c5c;\r\n`;\r\n\r\nexport const Span = styled.p`\r\n    font-size: 15px;\r\n    text-align: center;\r\n    //color: #898989;\r\n    color: ${props => props.color === \"red\" ? \"red\" : \"#898989\"};\r\n    font-family:${props => props.color === \"red\" ? \"DINNextLTPro-Bold\" : \"DINNextLTPro-Regular\"}; // 'DINNextLTPro-Bold';\r\n`;\r\n\r\nexport const BlockWrapper = styled.div`\r\n    margin-bottom: 30px;\r\n    width: 100%;\r\n`;\r\nexport const FlexRowCenter = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n`;\r\nexport const ContainerWrapper = styled(FlexRowCenter)`\r\n    margin: 0 auto;\r\n    width: 1082px;\r\n`;\r\nexport const Button = styled.button`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 15px;\r\n    padding: 13px 25px 9px;\r\n    margin-top: ${props => props.color === \"white\" ? \"0\" : \"20px\"};\r\n    border: none;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n    \r\n    background: ${props => props.color === \"white\" ? \"#fff\" : \"#32cdff\"};\r\n    color: ${props => props.color === \"white\" ? \"#32cdff\" : \"#fff\"};\r\n    text-transform: uppercase;\r\n    \r\n    &:hover {\r\n        filter: brightness(95%);\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    &:disabled {\r\n      cursor: default;\r\n      opacity: .4;\r\n    }\r\n`;\r\n\r\n","import styled from 'styled-components/macro';\r\nimport {BlockWrapper, ContainerWrapper, FlexRowCenter} from \"./commonStyle\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const HeaderWrapper = styled(BlockWrapper)`\r\n    background-color: #32cdff;\r\n    box-shadow: 0 3px 5px rgba(0,0,0,.05);\r\n    height: 60px;\r\n`;\r\nexport const HeaderContainer = styled(ContainerWrapper)`\r\n    justify-content: space-between;\r\n`;\r\nexport const LogoLinkBlock = styled(FlexRowCenter)`\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n`;\r\nexport const LogoImg = styled.img`\r\n    height: 44px;\r\n    width: 44px;\r\n    margin-right: 5px;\r\n`;\r\nexport const LogoText = styled.span`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 30px;\r\n    color: #fff;\r\n    text-transform: lowercase;\r\n`;\r\nexport const MenuNavLink = styled(NavLink)`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 15px;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    margin-top: 6px;\r\n    margin-right: 40px;\r\n    opacity: .8;\r\n    cursor: pointer;\r\n    \r\n    &:hover {\r\n        opacity: 1;\r\n        border-bottom: 2px solid #fff;\r\n        padding-top: 2px;\r\n    }\r\n`;","import styled from 'styled-components/macro';\r\nimport {BlockWrapper, ContainerWrapper, FlexRowCenter} from \"./commonStyle\";\r\n\r\nexport const MainWrapper = styled(BlockWrapper)`\r\n    height: 500px;\r\n`;\r\nexport const MainContainer = styled(ContainerWrapper)`\r\n    background-color: #fff;\r\n    border: none;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 25px 0 rgba(0,0,0,.04);\r\n`;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const SignUpForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;\r\nexport const LoginForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;\r\nexport const RecoveryPasswordForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;\r\nexport const NewPasswordForm = styled.div`\r\n    // margin: 40px 40px;\r\n`;","import styled from 'styled-components/macro';\r\n\r\nexport const FormStyled = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 300px;\r\n`;\r\n\r\nexport const InputCheckBoxDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 16px;\r\n    color: #5c5c5c\r\n    //opacity: .7;\r\n`;\r\nexport const InputStyled = styled.input<{hasError: boolean}>`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 16px;\r\n    border: none;\r\n    //border-bottom: 2px solid #c4c4c4;\r\n    border-bottom: ${props => props.hasError ? \"1px solid red\" : \"1px solid #c4c4c4\"};\r\n    margin: 10px 0;\r\n    width: ${props => props.type === \"checkbox\" ? \"auto\" : \"100%\"}; //100%;\r\n    margin-right: ${props => props.type === \"checkbox\" ? \"10px\" : \"0\"}; //100%;\r\n    color: #5c5c5c;\r\n    opacity: .7;\r\n    &:hover,\r\n    &:focus,\r\n    &:active {\r\n      opacity: 1;\r\n      outline:none;\r\n      border-bottom: 1px solid #32cdff;\r\n      ::-webkit-input-placeholder {\r\n      background-color: #fff;\r\n    }\r\n    }\r\n    \r\n    //::placeholder{\r\n    //  background-color: #f7f7f7;\r\n    //}\r\n`;\r\nexport const Error = styled.input<{hasError: boolean}>`\r\n    font-family: 'DINNextLTPro-Bold';\r\n    font-size: 18px;\r\n    border: none;\r\n    //border-bottom: 2px solid #c4c4c4;\r\n    border-bottom: ${props => props.hasError ? \"2px solid red\" : \"2px solid #c4c4c4\"};\r\n    margin: 10px 0;\r\n    width: 100%;\r\n    color: #5c5c5c;\r\n    opacity: .5;\r\n`;\r\n\r\n\r\n// const PasswordInput = styled.input.attrs(props => ({\r\n//         // Every <PasswordInput /> should be type=\"password\"\r\n//         type: \"password\"\r\n//     }))``\r\n//\r\n//     // This specific one is hidden, so let's set aria-hidden\r\n//     <PasswordInput aria-hidden=\"true\" />","import React from \"react\";\r\nimport {InputStyled} from \"../../style/forForms/formControlsStyle\";\r\n//import {Span} from \"../../style/commonStyle\";\r\n\r\nexport const Input = ({input, meta, placeholder, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    const placeholderText = hasError? meta.error : placeholder;\r\n\r\n    return (\r\n        <>\r\n            <InputStyled hasError={hasError} errorText={meta.error} {...input} {...props}\r\n                         placeholder={placeholderText}\r\n            />\r\n            {/*{hasError && <Span color={\"red\"}>{meta.error}</Span>}*/}\r\n        </>\r\n    )\r\n}\r\n","export const requiredField = (value: string) => {\r\n    if (value)\r\n        return undefined;\r\n    else return \"Field is required\";\r\n}\r\n\r\nexport const maxLength = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength)\r\n        return `Max length is ${maxLength} symbols`;\r\n    else return undefined;\r\n}\r\n\r\nexport const emailValidation = (value: string) => {\r\n    return value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined\r\n}","import React from 'react';\r\nimport {ImpulseSpinner} from \"react-spinners-kit\";\r\nimport {FlexRowCenter} from '../../style/commonStyle';\r\n// https://reactjsexample.com/a-collection-of-loading-spinners-with-react-js-2/\r\n\r\ntype PreloaderType = {\r\n    backColor: string\r\n    frontColor: string\r\n    size: number\r\n    isLoading: boolean\r\n}\r\n\r\nconst Preloader: React.FC<PreloaderType> = ({size, backColor, frontColor, isLoading}) => {\r\n\r\n    return (\r\n        <FlexRowCenter>\r\n            <ImpulseSpinner size={size} backColor={backColor} frontColor={frontColor} loading={isLoading}/>\r\n        </FlexRowCenter>\r\n    )\r\n    // <RingSpinner size={size} color={color} loading={isLoading}/>\r\n}\r\n\r\nexport default Preloader;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button, Span} from \"../../main/ui/style/commonStyle\";\r\nimport { FormStyled } from \"../../main/ui/style/forForms/formControlsStyle\";\r\nimport {emailValidation, requiredField} from \"../../main/ui/components/forForms/validators\";\r\n// import Preloader from \"../../main/ui/components/Preloader\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\n\r\ntype IFormProps = {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\ntype IPassProps = {\r\n    regInProgress: boolean\r\n}\r\n\r\nconst SignInForm = ({error, handleSubmit, regInProgress}: IPassProps & InjectedFormProps<IFormProps, IPassProps>) => {\r\n    return (\r\n        <FormStyled onSubmit={handleSubmit}>\r\n            <Field name=\"email\" component={Input} type=\"email\" placeholder=\"Email\"\r\n                   validate={[emailValidation, requiredField]}\r\n            />\r\n            <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\"\r\n                   validate={[requiredField]}\r\n            />\r\n            {error && <Span color={\"red\"}>{error}</Span>}\r\n            {regInProgress ?\r\n                // <Preloader/>\r\n                <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={regInProgress}/>\r\n                : <Button color={\"blue\"}>Sign Up</Button>}\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const SignInReduxForm = reduxForm<IFormProps, IPassProps>({form: 'signIn'})(SignInForm)","import axios from \"axios\";\r\n\r\ntype RegistrationResponseType = {\r\n    addedUser: {\r\n        email: string\r\n        isAdmin: boolean\r\n    },\r\n    success: boolean\r\n}\r\n\r\nexport type AuthorizationResponseType = {\r\n    email: string\r\n    name: string\r\n    isAdmin: boolean\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    success: boolean\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-cafe-back.herokuapp.com/\"\r\n});\r\n\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post<RegistrationResponseType>(`auth/register`, {email, password})\r\n            .then(response => {\r\n                debugger\r\n                return response.data\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<AuthorizationResponseType>(`auth/login`, {email, password, rememberMe})\r\n            .then(response => {\r\n                debugger\r\n                return response.data\r\n            })\r\n    }\r\n    // getMe(token:string) {\r\n    //     return instance.post<ResponseType>(`auth/me`, {token})\r\n    //         .then(response => response.data)\r\n    // }\r\n};","import {RegistrationType} from \"../entity-auth\";\r\nimport {AppStateType, InferActionTypes} from \"../../main/bll/store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {authAPI} from \"../api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nlet initialState: RegistrationType = {\r\n    isRegistrationSuccessful: false,\r\n    isRegistrationInProgress: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst registrationReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"registration-reducer/SUCCESS\":\r\n            return {\r\n                ...state,\r\n                isRegistrationSuccessful: action.success,\r\n                isRegistrationInProgress: false\r\n            };\r\n        case \"registration-reducer/PROGRESS\":\r\n            return {\r\n                ...state,\r\n                isRegistrationInProgress: true\r\n            };\r\n        case \"registration-reducer/ERROR\":\r\n            return {\r\n                ...state,\r\n                isRegistrationSuccessful: false,\r\n                isRegistrationInProgress: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setRegistrationSuccess: (success: boolean) => ({type: \"registration-reducer/SUCCESS\", success} as const),\r\n    setRegistrationInProgress: (progress: boolean) => ({type: \"registration-reducer/PROGRESS\", progress} as const),\r\n    setError: () => ({type: \"registration-reducer/ERROR\"} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nexport const registration = (email: string, password: string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(actions.setRegistrationInProgress(true));\r\n            const data = await authAPI.registration(email, password);\r\n            if (data.success)dispatch(actions.setRegistrationSuccess(true));\r\n        } catch (error) {\r\n            dispatch(actions.setError());\r\n            dispatch(stopSubmit(\"signIn\", {_error: error.response.data.error}));\r\n        }\r\n    }\r\n\r\nexport default registrationReducer;","import React from 'react';\r\nimport {H3, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {SignUpForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {SignInReduxForm} from \"./SignInForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {registration} from \"./registration-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {loginPath} from \"../../main/ui/components/Body\";\r\n\r\nconst SignIn = () => {\r\n    const dispatch = useDispatch();\r\n    const regSuccess = useSelector((store: AppStateType) => store.registration.isRegistrationSuccessful);\r\n    const regInProgress = useSelector((store: AppStateType) => store.registration.isRegistrationInProgress);\r\n\r\n    const register = (formData: any) => {\r\n        dispatch(registration(formData.email, formData.password))\r\n    }\r\n\r\n    if (regSuccess) return <Redirect to={loginPath}/>\r\n\r\n    return (\r\n        <SignUpForm>\r\n            <H3>Create a account</H3>\r\n            <Span>Already have an account?</Span>\r\n            <SignInReduxForm onSubmit={register} regInProgress={regInProgress}/>\r\n        </SignUpForm>\r\n    )\r\n}\r\n\r\nexport default SignIn;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {FormStyled, InputCheckBoxDiv} from \"../../main/ui/style/forForms/formControlsStyle\";\r\nimport {requiredField} from \"../../main/ui/components/forForms/validators\";\r\nimport Preloader from \"../../main/ui/components/preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    isLoading: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<PropsType & InjectedFormProps<{}, PropsType>>  = ({error, handleSubmit, submitting , isLoading}) => {\r\n    return (\r\n        <FormStyled onSubmit={handleSubmit}>\r\n            <Field name=\"email\" component={Input} type=\"email\" placeholder=\"Email\"\r\n                   validate={[requiredField]} />\r\n            <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\"\r\n                   validate={[requiredField]} />\r\n            <InputCheckBoxDiv>\r\n                <Field name=\"rememberMe\" component={Input} type=\"checkbox\"/>remember me\r\n            </InputCheckBoxDiv>\r\n\r\n            {error && <Span color={\"red\"}>{error}</Span>}\r\n            {isLoading && <Preloader size={30} backColor=\"#fff\" frontColor=\"#32cdff\" isLoading={isLoading}/>}\r\n\r\n            <Button color={\"blue\"} disabled={isLoading}>Log in</Button>\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const LoginReduxForm = reduxForm<{}, PropsType>({form: 'login'})(LoginForm)","import {AppStateType, InferActionTypes} from \"../../main/bll/store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {authAPI} from \"../api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type LoginType = {\r\n    email: string\r\n    isAuth: boolean\r\n    isloading: boolean\r\n    errorMessage: string\r\n}\r\n\r\nlet initialState: LoginType = {\r\n    email: \"\",\r\n    isAuth: false,\r\n    isloading: false,\r\n    errorMessage: \"\"\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst loginReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SET_AUTH_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                isAuth: action.isAuth\r\n            };\r\n        case \"SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isloading: action.isloading\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (email: string, isAuth: boolean) => ({type: \"SET_AUTH_USER_DATA\", email, isAuth} as const),\r\n    setLoading: (isloading: boolean) => ({type: \"SET_LOADING\", isloading} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//thunks\r\nexport const login = (email: string, password: string, rememberMe: boolean):\r\n    ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(actions.setLoading(true));\r\n            const response = await authAPI.login(email, password, rememberMe)\r\n            debugger\r\n            dispatch(actions.setAuthUserData(response.email, true));\r\n            dispatch(actions.setLoading(false));\r\n        } catch (error) {\r\n            debugger\r\n            dispatch(actions.setAuthUserData(\"\", false));\r\n            dispatch(actions.setLoading(false));\r\n            dispatch(stopSubmit(\"login\", {_error: error.response.data.error}));\r\n        }\r\n    }\r\n\r\nexport default loginReducer;","import React, {useCallback, useEffect} from 'react';\r\nimport {H3, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {LoginForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"./login-reducer\";\r\nimport {AppStateType} from \"../../main/bll/store\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {profilePath} from \"../../main/ui/components/Body\";\r\n\r\nconst Login: React.FC = () => {\r\n\r\n    const isAuth = useSelector((store: AppStateType) => store.login.isAuth);\r\n    const isLoading = useSelector((store: AppStateType) => store.login.isloading);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const onLogin = useCallback(({email, password, rememberMe}: any) => {\r\n        dispatch(login(email, password, rememberMe));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isAuth)\r\n            history.push(profilePath)\r\n    }, [isAuth])\r\n\r\n    return (\r\n        <LoginForm>\r\n            <H3>Log in with your account</H3>\r\n            <Span>Don't have an account??</Span>\r\n            <LoginReduxForm onSubmit={onLogin} isLoading={isLoading}/>\r\n        </LoginForm>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button} from \"../../main/ui/style/commonStyle\";\r\nimport {FormStyled} from \"../../main/ui/style/forForms/formControlsStyle\";\r\n// import {requiredField} from \"./validators\";\r\n\r\nconst RecoveryPasswordForm = () => {\r\n    return (\r\n        <FormStyled>\r\n            <Field name=\"email\" component={Input} type=\"email\" placeholder=\"Email\"\r\n                   // validate={[requiredField]}\r\n            />\r\n            <Button color={\"blue\"}>Reset Password</Button>\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const RecoveryPasswordReduxForm = reduxForm({form: 'recoveryPassword'})(RecoveryPasswordForm)","import React from 'react';\r\nimport {H3, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {RecoveryPasswordReduxForm} from './RecoveryPasswordForm';\r\nimport {RecoveryPasswordForm} from \"../../main/ui/style/forForms/formsStyle\";\r\n\r\nconst RecoveryPassword = () => {\r\n    return (\r\n        <RecoveryPasswordForm>\r\n            <H3>What's your email?</H3>\r\n            <RecoveryPasswordReduxForm />\r\n        </RecoveryPasswordForm>\r\n    )\r\n}\r\n\r\nexport default RecoveryPassword;\r\n","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../main/ui/components/forForms/FormsControls\";\r\nimport {Button} from \"../../main/ui/style/commonStyle\";\r\nimport {FormStyled} from \"../../main/ui/style/forForms/formControlsStyle\";\r\n// import {requiredField} from \"./validators\";\r\n\r\nconst NewPasswordForm = () => {\r\n    return (\r\n        <FormStyled>\r\n            <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\"\r\n                   // validate={[requiredField]}\r\n            />\r\n            {/*<div>*/}\r\n            {/*    <Field name=\"rememberMe\" component={Input} type=\"checkbox\"/>remember me*/}\r\n            {/*</div>*/}\r\n            <Button color={\"blue\"}>Change password</Button>\r\n        </FormStyled>\r\n    );\r\n};\r\n\r\nexport const NewPasswordReduxForm = reduxForm({form: 'newPassword'})(NewPasswordForm)","import React from 'react';\r\nimport {H3, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {LoginForm, NewPasswordForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {LoginReduxForm} from \"../login/LoginForm\";\r\nimport {NewPasswordReduxForm} from \"./NewPasswordForm\";\r\n\r\nconst NewPassword = () => {\r\n    return (\r\n        <NewPasswordForm>\r\n            <H3>Enter new password</H3>\r\n            <NewPasswordReduxForm />\r\n        </NewPasswordForm>\r\n    )\r\n}\r\n\r\nexport default NewPassword;\r\n","import React from 'react';\r\nimport {H3, Span} from \"../../main/ui/style/commonStyle\";\r\nimport {LoginForm} from \"../../main/ui/style/forForms/formsStyle\";\r\nimport {LoginReduxForm} from \"../login/LoginForm\";\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n            <H3>Profile</H3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport {MainContainer, MainWrapper} from '../style/bodyStyle';\r\nimport SignIn from \"../../../01-auth/registration/SignIn\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Login from \"../../../01-auth/login/Login\";\r\nimport RecoveryPassword from \"../../../01-auth/recoveryPassword/RecoveryPassword\";\r\nimport NewPassword from \"../../../01-auth/newPassword/NewPassword\";\r\nimport Profile from \"../../../01-auth/profile/Profile\";\r\n\r\nexport const loginPath = '/login';\r\nexport const signInPath = '/signIn';\r\nexport const profilePath = '/profile';\r\nexport const recoveryPasswordPath = '/recoveryPassword';\r\nexport const newPasswordPath = '/newPassword';\r\n\r\nconst Body: React.FC = () => {\r\n    return (\r\n        <MainWrapper>\r\n            <MainContainer>\r\n                <Route path={signInPath} component={SignIn}/>\r\n                <Route path={loginPath} component={Login}/>\r\n                <Route path={recoveryPasswordPath} component={RecoveryPassword}/>\r\n                <Route path={newPasswordPath} component={NewPassword}/>\r\n                <Route path={profilePath} component={Profile}/>\r\n                {/*<Route exact path='/' render={() => <App/>}/>*/}\r\n                {/*<Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>*/}\r\n            </MainContainer>\r\n        </MainWrapper>\r\n    )\r\n}\r\n\r\nexport default Body;\r\n","import React from 'react';\r\nimport {HeaderContainer, HeaderWrapper, LogoImg, LogoLinkBlock, LogoText, MenuNavLink} from \"../style/headerStyle\";\r\nimport logo from '../images/logo.png'\r\nimport {FlexRowCenter, Button} from '../style/commonStyle';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {loginPath, newPasswordPath, profilePath, recoveryPasswordPath, signInPath} from './Body';\r\n\r\nconst Header:React.FC = () => {\r\n    return (\r\n        <HeaderWrapper>\r\n            <HeaderContainer>\r\n                <LogoLinkBlock>\r\n                {/*<LogoLinkBlock as={NavLink} to='/login'>*/}\r\n                    <LogoImg src={logo} alt=\"logo\"/>\r\n                    <LogoText>cards</LogoText>\r\n                </LogoLinkBlock>\r\n                <FlexRowCenter>\r\n                    <MenuNavLink to={loginPath}>Log in</MenuNavLink>\r\n                    <MenuNavLink to={recoveryPasswordPath}>Recovery</MenuNavLink>\r\n                    <MenuNavLink to={newPasswordPath}>New password</MenuNavLink>\r\n                    <MenuNavLink to={profilePath}>Profile</MenuNavLink>\r\n                    <Button as={NavLink} to={signInPath} color={\"white\"}>Sign in</Button>\r\n                </FlexRowCenter>\r\n            </HeaderContainer>\r\n        </HeaderWrapper>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from \"./components/Header\";\r\nimport Body from \"./components/Body\";\r\n// import GlobalStyles from \"./style/globalStyles\";\r\n\r\nconst AppWrapper = styled.div`\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <>\r\n            {/*<GlobalStyles/>*/}\r\n            <AppWrapper>\r\n                <Header/>\r\n                <Body/>\r\n            </AppWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AuthType} from \"../entity-auth\";\r\nimport {InferActionTypes} from \"../../main/bll/store\";\r\n\r\nlet initialState: AuthType = {\r\n    email: \"\",\r\n    login: \"\",\r\n    idUser: \"\",\r\n    isAuth: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst newPasswordReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n                // isAuth: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId:number, email:string, login:string) =>\r\n        ({type: \"LOGIN\", data: {userId, email, login}})\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//example thunk\r\n\r\n// export const login = (email:string, password:string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n//     async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>, getState: () => AppStateType) => {\r\n//         const response = await authAPI.login(email, password)\r\n//         if (response.resultCode === 0) {\r\n//             dispatch(actions.setAuthUserData(response.data.data.userId, response.data.data.email, response.data.data.login))\r\n//         }\r\n//         else{\r\n//             let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n//             dispatch(stopSubmit(\"login\", {_error: message}));\r\n//         }\r\n//     }\r\n\r\n// example thunk from socialNetwork\r\n\r\n// export const logout = () => {\r\n//     return (dispatch) => {\r\n//         authAPI.logout()\r\n//             .then(response => {\r\n//                 debugger\r\n//                 if (response.resultCode === 0) {\r\n//                     dispatch(setAuthUserData(null, null, null, false));\r\n//                 }\r\n//             });\r\n//     }\r\n// };\r\n\r\nexport default newPasswordReducer;","import {AuthType} from \"../entity-auth\";\r\nimport {InferActionTypes} from \"../../main/bll/store\";\r\n\r\nlet initialState: AuthType = {\r\n    email: \"\",\r\n    login: \"\",\r\n    idUser: \"\",\r\n    isAuth: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst recoveryPasswordReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n                // isAuth: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId:number, email:string, login:string) =>\r\n        ({type: \"LOGIN\", data: {userId, email, login}})\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//example thunk\r\n\r\n// export const login = (email:string, password:string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n//     async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>, getState: () => AppStateType) => {\r\n//         const response = await authAPI.login(email, password)\r\n//         if (response.resultCode === 0) {\r\n//             dispatch(actions.setAuthUserData(response.data.data.userId, response.data.data.email, response.data.data.login))\r\n//         }\r\n//         else{\r\n//             let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n//             dispatch(stopSubmit(\"login\", {_error: message}));\r\n//         }\r\n//     }\r\n\r\n// example thunk from socialNetwork\r\n\r\n// export const logout = () => {\r\n//     return (dispatch) => {\r\n//         authAPI.logout()\r\n//             .then(response => {\r\n//                 debugger\r\n//                 if (response.resultCode === 0) {\r\n//                     dispatch(setAuthUserData(null, null, null, false));\r\n//                 }\r\n//             });\r\n//     }\r\n// };\r\n\r\nexport default recoveryPasswordReducer;","import {AuthType} from \"../entity-auth\";\r\nimport {InferActionTypes} from \"../../main/bll/store\";\r\n\r\nlet initialState: AuthType = {\r\n    email: \"\",\r\n    login: \"\",\r\n    idUser: \"\",\r\n    isAuth: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n                // isAuth: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId:number, email:string, login:string) =>\r\n        ({type: \"LOGIN\", data: {userId, email, login}})\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\n//example thunk\r\n\r\n// export const login = (email:string, password:string): ThunkAction<void, AppStateType, unknown, ActionsTypes> =>\r\n//     async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>, getState: () => AppStateType) => {\r\n//         const response = await authAPI.login(email, password)\r\n//         if (response.resultCode === 0) {\r\n//             dispatch(actions.setAuthUserData(response.data.data.userId, response.data.data.email, response.data.data.login))\r\n//         }\r\n//         else{\r\n//             let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n//             dispatch(stopSubmit(\"login\", {_error: message}));\r\n//         }\r\n//     }\r\n\r\n// example thunk from socialNetwork\r\n\r\n// export const logout = () => {\r\n//     return (dispatch) => {\r\n//         authAPI.logout()\r\n//             .then(response => {\r\n//                 debugger\r\n//                 if (response.resultCode === 0) {\r\n//                     dispatch(setAuthUserData(null, null, null, false));\r\n//                 }\r\n//             });\r\n//     }\r\n// };\r\n\r\nexport default profileReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport loginReducer from \"../../01-auth/login/login-reducer\";\r\nimport registrationReducer from \"../../01-auth/registration/registration-reducer\";\r\nimport newPasswordReducer from \"../../01-auth/newPassword/newPassword-reducer\";\r\nimport recoveryPasswordReducer from \"../../01-auth/recoveryPassword/recoveryPassword-reducer\";\r\nimport profileReducer from \"../../01-auth/profile/profile-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login:loginReducer,\r\n    registration: registrationReducer,\r\n    newPassword: newPasswordReducer,\r\n    recoveryPassword: recoveryPasswordReducer,\r\n    profile: profileReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends {[key: string]: (...args:any)=> any}> = ReturnType<PropertiesType<T>>\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './main/ui/style/globalStyles';\r\nimport './index.css';\r\nimport App from './main/ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from './main/bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}